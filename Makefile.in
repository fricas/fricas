
## ----------------------------------------
## -- Old-style Axiom makefile variables --
## ----------------------------------------

COMMAND_DIR=$(DESTDIR)$(libdir)/fricas/target/$(target)/bin
COMMAND=$(COMMAND_DIR)/fricas

subdir =

SUBDIRS = src

build_srcdir = $(builddir)/src

FRICAS_SRC_TARGETS = all-algebra all-asq all-axiomsys all-boot \
	all-clef all-doc all-graph all-hyper all-input all-interpsys \
	all-lib all-lisp all-sman all-src

BUILD_DATE:=`date`

.PHONY: all install $(FRICAS_SRC_TARGETS)
all: all-ax all-contrib

# If there is a directory "${PREGENERATED}/target", we can simply copy
# its contents to ${fricas_targetdir}.
# The pregenerated lisp files are under ${PREGENERATED}/src/algebra.
# The .daase files are are under ${PREGENERATED}/target/algebra.
# For more details see the "dist" target below.
pre-gen: stamp-rootdirs
	echo "PREGENERATED=[${PREGENERATED}]"
	if test -z "${PREGENERATED}"; then \
	  echo "Not using pre-generated data."; \
	elif test ! -d "${PREGENERATED}"; then \
	  echo "PREGENERATED directory does not exist."; \
	  exit 1; \
	else \
	  if test -d ${PREGENERATED}/target; then \
	    cp -r ${PREGENERATED}/target/* ${fricas_targetdir}; \
	  fi && \
	  ${STAMP} $@; \
	fi

# Generate the efricas script.
all-contrib: all-src
	cd contrib/emacs && ${MAKE}

all-ax: all-src
	@echo finished system build on `date` | tee >lastBuildDate

all-src: stamp-rootdirs @fricas_all_prerequisites@

all-input: all-src

check: all-src
	cd src/input; ${MAKE} check

viewports:
	cd src/doc; ${MAKE} MAYBE_VIEWPORTS=viewports

$(FRICAS_SRC_TARGETS): pre-gen
	cd $(build_srcdir) && $(MAKE) BUILD_DATE="${BUILD_DATE}" $@

stamp-rootdirs:
	${MKDIR_P} $(fricas_build_bindir)
	${MKDIR_P} $(fricas_build_libdir)
	${MKDIR_P} $(fricas_target_bindir)
	${MKDIR_P} $(fricas_target_libdir)
	${MKDIR_P} $(fricas_target_datadir)/spadhelp
	${MKDIR_P} $(fricas_target_datadir)/msgs
	${MKDIR_P} $(fricas_target_texdir)
	${MKDIR_P} $(fricas_targetdir)/algebra/
	${MKDIR_P} $(fricas_targetdir)/autoload
	${MKDIR_P} $(fricas_targetdir)/input
	${MKDIR_P} $(fricas_target_srcdir)/algebra
	${MKDIR_P} ${TMP}
	$(STAMP) stamp-rootdirs

reltarget = target/$(target)

fricas_lib = $(subst $(exec_prefix)/,,$(libdir))

install: install-src install-contrib

install-src:
	@echo Installing FriCAS in $(prefix)
	rm -rf '$(DESTDIR)$(libdir)/fricas'
	$(mkinstalldirs) '$(DESTDIR)$(libdir)/fricas'
	$(mkinstalldirs) '$(DESTDIR)$(libdir)/fricas/$(reltarget)/lib'
	for A in algebra autoload doc share src lib/graph ; do \
	  for B in `find $(reltarget)/$$A -type d -print` ; do \
	     $(mkinstalldirs) '$(DESTDIR)$(libdir)'/fricas/$$B \
	       || exit 1 ; \
	  done ; \
	  for B in `find $(reltarget)/$$A -type f -print` ; do \
	     $(INSTALL_DATA) $$B '$(DESTDIR)$(libdir)'/fricas/$$B \
	       || exit 1 ; \
	  done ; \
	done
	$(mkinstalldirs) '$(DESTDIR)$(libdir)/fricas/$(reltarget)/bin'
	for A in bin/AXIOMsys bin/asq bin/clef bin/htadd bin/hypertex \
	         bin/sman bin/viewAlone lib/ex2ht lib/hthits lib/session \
		 lib/spadbuf lib/spadclient lib/view2D lib/view3D \
		 lib/viewman ; do \
	   if [ -f $(reltarget)/$$A$(EXEEXT) ] ; then \
	      $(INSTALL_PROGRAM) $(reltarget)/$$A$(EXEEXT) \
	         '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/$$A$(EXEEXT) \
		|| exit 1 ; \
	   fi ; \
	done
	if [ -f $(reltarget)/lib/libspad.so ] ; then \
	   $(INSTALL_PROGRAM) $(reltarget)/lib/libspad.so \
	       '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/lib/libspad.so \
	     || exit 1 ; \
	fi
	if [ -f $(reltarget)/lib/gmp_wrap.so ] ; then \
	   $(INSTALL_PROGRAM) $(reltarget)/lib/gmp_wrap.so \
	       '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/lib/gmp_wrap.so \
	     || exit 1 ; \
	fi
	for A in SPADEDIT htsearch presea ; do \
	   if [ -f $(reltarget)/lib/$$A ] ; then \
	      $(INSTALL_SCRIPT) $(reltarget)/lib/$$A \
	        '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/lib/$$A \
	       || exit 1 ; \
	   fi ; \
	done
	for A in command.list copyright summary ; do \
	   $(INSTALL_DATA) $(reltarget)/lib/$$A \
	      '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/lib/$$A \
	     || exit 1 ; \
	done
	echo '#!/bin/sh -' > '${COMMAND}'.tmp
	echo exec_prefix='"$${FRICAS_PREFIX:-$(exec_prefix)}"' \
               >> '${COMMAND}'.tmp
	if test "$(fricas_lib)" != "$(libdir)" ;  then \
	   echo \
	      AXIOM='"$${exec_prefix}/$(fricas_lib)/fricas/target/$(target)"' \
	       >> '${COMMAND}'.tmp ; \
	else \
	   echo AXIOM='"$(libdir)/fricas/target/$(target)"' \
               >> '${COMMAND}'.tmp ; \
	fi
	echo export AXIOM >> '${COMMAND}'.tmp

	cat $(fricas_src_srcdir)/etc/fricas >> '${COMMAND}'.tmp
	$(INSTALL_SCRIPT) '${COMMAND}'.tmp '${COMMAND}'
	-rm '${COMMAND}'.tmp
	rm -f '$(DESTDIR)$(bindir)'/fricas
	$(mkinstalldirs) '$(DESTDIR)$(bindir)'
	$(INSTALL_SCRIPT) '$(COMMAND)' '$(DESTDIR)$(bindir)/fricas'
	if test x"@BUILD_ALDOR_INTERFACE@" = xyes ; then \
	    cd src/aldor && $(MAKE) install; \
	fi
	@echo 79 FriCAS installation finished.

install-contrib:
	$(mkinstalldirs) '$(DESTDIR)$(bindir)'
	$(mkinstalldirs) '$(DESTDIR)@emacsdatadir@'
	cd contrib/emacs && $(MAKE) install;
	@echo 79 FriCAS contrib installation finished.


mostlyclean-local: clean-distdir
	@-rm -f lastBuildDate

clean-local: mostlyclean-local
	-rm -f stamp-*
	-cd contrib/emacs && ${MAKE} clean
	-rm -rf $(fricas_targetdir)
	-rm -rf build/$(target)

distclean-local: clean-local
	@-rm -rf build
	-rm -rf target
	-cd contrib/emacs && ${MAKE} distclean
	@-rm -f config.status config.log config_cl.out
	@-rm -f Makefile

$(top_builddir)/config.status: $(top_srcdir)/configure
	$(SHELL) ./config.status --recheck

$(RECURSIVE_TARGETS): stamp-rootdirs @fricas_all_prerequisites@

###################################################################
# "make dist" creates a distribution tarball with precomputed machine
# independent files like *.lsp, *.daase, *.ht, *.pht, *.VIEW/*, *.help.
# Running "make dist" must be called *after* a full (out-of-source)
# build. The "out-of-source" build is necessary, since we "cp -r" from
# the fricas checkout directory.
#
# The tarball data will be temporarily copied into a local directory
# then tar'ed and bzipped.
#
# We do not make this target dependent on "all", though, because it is
# currently not possible to restart the build from an interrupted
# build process.
#
distdir=${PACKAGE_TARNAME}-${PACKAGE_VERSION}
disttargetdir=${distdir}/pre-generated/target
distsrcdir=${distdir}/pre-generated/src
DIST_TARBALL=${distdir}.tar.bz2

out-of-source-check:
	test "${abs_builddir}" != ${abs_top_srcdir}

# copy databases and algebra bootstrap files
dbs=browse.daase category.daase compress.daase interp.daase operation.daase\
    libdb.text comdb.text USERS.DAASE DEPENDENTS.DAASE

generated_dbs=${addprefix ${disttargetdir}/algebra/, ${dbs}}
${generated_dbs}: ${disttargetdir}/%: ${fricas_targetdir}/%
	test -d ${disttargetdir}/algebra || ${MKDIR_P} ${disttargetdir}/algebra
	cp -r $< $@

dist-lisp: ${generated_dbs}
	(cd src/algebra; ls -d *.NRLIB | sed 's,\.NRLIB$$,,') > nrlibs
	${MKDIR_P} ${distsrcdir}/algebra
	for A in $$(cat nrlibs); do \
	  cp src/algebra/$${A}.NRLIB/$${A}.lsp ${distsrcdir}/algebra/$${A}.lsp;\
	done

# We assume that the *.help files are available from a directory
# ${helpsrcdir}. It is an error if this variable is not set.
help-sanity-check:
	test -f ${helpsrcdir}/Integer.help \
	|| (echo "helpfiles are missing"; \
	    echo "use 'make dist helpsrcdir=/path/to/spadhelp'"; \
	    exit 1)

# .help files that are generated during the documentation build under
# src/doc will be taken care of by the dist-doc target.
dist-help: help-sanity-check
	${MKDIR_P} ${disttargetdir}/share/spadhelp
	cp ${helpsrcdir}/* ${disttargetdir}/share/spadhelp

# Copy generated .ht and .pht and *.VIEW/* files to distribution directory.
dist-doc:
	cd src/doc; ${MAKE} disttargetdir="../../${disttargetdir}" dist

${DIST_TARBALL}: out-of-source-check lastBuildDate dist-help dist-lisp dist-doc
	cp -r ${abs_top_srcdir}/* ${distdir}
	find ${distdir} -type d -name .svn -exec rm -rf {} \+
	tar cjf $@ ${distdir}

dist: ${DIST_TARBALL}

clean-distdir:
	-rm -rf ${distdir} ${DIST_TARBALL}
