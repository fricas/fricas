;;; System package definitions

(in-package "CL-USER")

(defpackage "FRICAS-LISP"
  (:documentation "This is a \"COMMON-LISP\"-like package that FriCAS uses. It exports all CL symbols, in addition to some other portability symbols introduced by FriCAS.")
  (:use "CL")
  ;; Shadows
  #+cmu
  (:shadow "UNION" "NUNION")            ; We have our own
                                        ; implementations of these CL
                                        ; functions for CMUCL.
  #-gcl
  (:shadow "IN-PACKAGE")
  #+gcl
  (:shadow "QUIT")

  ;; Exports
  ;;
  ;; All users of the FRICAS-LISP package expect that all CL symbols
  ;; are exported as well. It is not sufficient to just ':use' the
  ;; package.
  #.(loop :for s :being :each :external-symbol :of (find-package "COMMON-LISP")
          :collect s :into all-symbols
          :finally (return `(:export ,@all-symbols)))

  (:export
   "QUIT"
   "CHDIR"
   "getEnv"
   "getCLArgs"
   "load_quietly"
   "GET-CURRENT-DIRECTORY"
   "TRIM-DIRECTORY-NAME"
   "PAD-DIRECTORY-NAME"
   "FILE-KIND"
   "MAKEDIR"
   "FRICAS_COMPILE_FILE"
   "FRICAS_COMPILE_FASL"
   "fricas_probe_file"
   "DEFCONST"
   "EXIT-WITH-STATUS"
   "MEMQ"
   "quiet_load_alien"
   "handle_input_file"
   "handle_output_file"
   "maybe_delete_file"
   "remove_directory"
   "writeablep"
   "openServer"
   "sockGetInt"
   "sockSendInt"
   "sockSendString"
   "sockGetFloat"
   "sockSendFloat"
   "serverSwitch"
   "sockSendSignal"
   "sockGetStringFrom")

  ;; More GCL nonsense.
  #+gcl
  (:import-from "LISP" "LAMBDA-CLOSURE")
  #+gcl
  (:export "LAMBDA-CLOSURE"))

(defpackage "FOAM"
  (:documentation "Package containing support routines for code generated by Aldor compiler.")
  (:use "FRICAS-LISP"))

(defpackage "FOAM-USER"
  (:documentation "Package for code output by Aldor.")
  (:use "FRICAS-LISP" "FOAM"))

(defpackage "BOOTTRAN"
  (:documentation "Package containing Shoe to Lisp translator")
  (:use "FRICAS-LISP"))

(defpackage "BOOT"
  (:documentation
   "Main FriCAS package. The interpreter and the algebra are run
after switching to the boot package (in-package \"BOOT\") so any
symbol that the interpreter or algebra uses has to appear here.")
  (:use "FRICAS-LISP"))

;;; FIXME: Remove these circular package dependencies.
(import '(BOOTTRAN::BOOTTOCLC
          BOOTTRAN::STTOSEX
          BOOTTRAN::|shoeRemovebootIfNec|)
        (find-package "BOOT"))

(import '(BOOT::QSETVELT
          BOOT::SETELT_BVEC
          BOOT::STR_ELT)
        (find-package "BOOTTRAN"))

;;; Aldor 1.1.0 and before produces IN-PACKAGE statements with :use options.
;;; These are not allowed in ANSI Common Lisp, so we have to provide our own
;;; IN-PACKAGE.  The :use options can actually be ignored, so we do not use
;;;
;;;     (defpackage package options)
;;;     (in-package package)

#-gcl
(defmacro FRICAS-LISP::IN-PACKAGE (package &rest options)
  (declare (ignore options))
  `(CL:IN-PACKAGE ,package))
