;;; System package definitions

(in-package #:cl-user)

(defpackage #:fricas-lisp
  (:documentation "This is a \"COMMON-LISP\"-like package that FriCAS uses. It exports all CL symbols, in addition to some other portability symbols introduced by FriCAS.")
  (:use #:cl)
  ;; Shadows
  #+cmu
  (:shadow #:union #:nunion)
  #-gcl
  (:shadow #:in-package)
  #+gcl
  (:shadow #:quit)

  ;; Exports
  ;;
  ;; All users of the FRICAS-LISP package expect that all CL symbols
  ;; are exported as well. It is not sufficient to just ':use' the
  ;; package.
  #.(loop :for s :being :each :external-symbol :of (find-package "COMMON-LISP")
          :collect s :into all-symbols
          :finally (return `(:export ,@all-symbols)))

  (:export
   #:quit
   #:chdir
   #:|getEnv|
   #:|getCLArgs|
   #:|load_quietly|
   #:get-current-directory
   #:trim-directory-name
   #:pad-directory-name
   #:file-kind
   #:makedir
   #:fricas_compile_file
   #:fricas_compile_fasl
   #:|fricas_probe_file|
   #:DEFCONST
   #:exit-with-status
   #:MEMQ
   #:|quiet_load_alien|
   #:|handle_input_file|
   #:|handle_output_file|
   #:|maybe_delete_file|
   #:|remove_directory|
   #:|writeablep|
   #:|openServer|
   #:|sockGetInt|
   #:|sockSendInt|
   #:|sockSendString|
   #:|sockGetFloat|
   #:|sockSendFloat|
   #:|serverSwitch|
   #:|sockSendSignal|
   #:|sockGetStringFrom|)

  ;; More GCL nonsense.
  #+gcl
  (:import-from #:lisp #:LAMBDA-CLOSURE)
  #+gcl
  (:export #:LAMBDA-CLOSURE))

(defpackage #:foam
  (:documentation "Package containing support routines for code generated by Aldor compiler.")
  (:use #:fricas-lisp))

(defpackage #:foam-user
  (:documentation "Package for code output by Aldor.")
  (:use #:fricas-lisp #:foam))

(defpackage #:boottran
  (:documentation "Package containing Shoe to Lisp translator")
  (:use #:fricas-lisp))

(defpackage #:boot
  (:documentation
   "Main FriCAS package. The interpreter and the algebra are run
after switching to the boot package (in-package \"BOOT\") so any
symbol that the interpreter or algebra uses has to appear here.")
  (:use #:fricas-lisp))

;;; FIXME: Remove these circular package dependencies.
(import '(BOOTTRAN::BOOTTOCLC
          BOOTTRAN::STTOSEX
          BOOTTRAN::|shoeRemovebootIfNec|)
        (find-package "BOOT"))

(import '(BOOT::QSETVELT
          BOOT::SETELT_BVEC
          BOOT::STR_ELT)
        (find-package "BOOTTRAN"))

;;; Aldor 1.1.0 and before produces IN-PACKAGE statements with :use options.
;;; These are not allowed in ANSI Common Lisp, so we have to provide our own
;;; IN-PACKAGE.  The :use options can actually be ignored, so we do not use
;;;
;;;     (defpackage package options)
;;;     (in-package package)

#-gcl
(defmacro FRICAS-LISP::IN-PACKAGE (package &rest options)
  (declare (ignore options))
  `(CL:IN-PACKAGE ,package))
