)set break resume
)expose UnittestCount UnittestAux Unittest

testsuite "array"

testcase "block transpose"

m := new(8, 8, 0)$TwoDimensionalArray(Integer);
for i in 1..8 repeat
   for j in 1..8 repeat
       m(i, j) := i + 8*j

m0 := copy(m);
m12 := m(1..4, 5..8);
testEquals("m12(1,2)", "49")
m(1..4, 5..8) := m(5..8, 1..4);
m(5..8, 1..4) := m12;
m12 := m([1..2,5..6],[3..4,7..8]);
m([1..2,5..6],[3,4,7,8]) := m([3,4,7,8], [1..2,5..6]);
m([3,4,7,8], [1,2,5,6]) := m12;
m12 := m([1,3,5,7], 2..8 by 2);
m([1,3,5,7], 2..8 by 2) := m(2..8 by 2, 1..7 by 2);
m(2..8 by 2, 1..7 by 2) := m12;
testEquals("m", "transpose(m0)")

testcase "shift matrix"

m := scalarMatrix(4, 1)
ms := m([2..4,1], 1..4)
testEquals("ms^4", "m")
ms(4,1) := 0
testEquals("ms^4", "0")

testcase "slices"

m := matrix([[1, 2, 3], [4, 5, 6]])
s := m(1, 1..2)
testEquals("s", "matrix([[1, 2]])")
s := m(2, [3,1])
testEquals("s", "matrix([[6, 4]])")
s := m(2..1, [1..3])
testEquals("nrows(s)", "0")
testEquals("ncols(s)", "3")
s := m([1..2, 1..2 by -1], [])
testEquals("nrows(s)", "2")
testEquals("ncols(s)", "0")
s := m([1..2, 2..1 by -1], [])
testEquals("nrows(s)", "4")
testEquals("ncols(s)", "0")

testcase "array construction"

testTrue("(a2 := array2([['a, 'b], ['c, 'd]])$TwoDimensionalArray(Symbol);"
         " true)")
testTrue("(a2(1,2) = 'b)@Boolean")

statistics()
