--Copyright The Numerical Algorithms Group Limited 1991.


-- Input for page Collections
)clear all

a := [i^3 for i in 0..10]
b := expand [0..10]
c := [x^3 for x in b]
d := [i^3 for i in 0..10 | even? i]
d := [x^3 for x in b | even? x]
d := [x for x in c | even? x]
d := [i^3 for i in 0..10 by 2 | even? i]
e := reverse [i^3 for i in 10..0 by -2 | even? i]
[x - y for x in d for y in e]
[x^3 - y for x in b | even? x for y in e]
f := [i^3 for i in 0..]
[i^3 for i in 0..10]
[i^3 for i in 0.. while i < 11]
[i^3 for i in 0.. for x in 0..10]
[[i^j for j in 0..3] for i in 0..]
[[i^j for j in 0..] for i in 0..3]
set [i^3 for i in 10..0 by -2]


-- Input generated from ContinuedFractionXmpPage
)clear all

c := continuedFraction(314159/100000)
partialQuotients c
convergents c
approximants c
pq := partialQuotients(1/c)
continuedFraction(first pq,repeating [1],rest pq)
z:=continuedFraction(3,repeating [1],repeating [3,6])
dens : Stream Integer := cons(1, stream((x +-> x + 4), 6))
cf := continuedFraction(0,repeating [1],dens)
ccf := convergents cf
eConvergents := [2*e + 1 for e in ccf]
eConvergents :: Stream Float
exp 1.0
cf := continuedFraction(1,[(2*i+1)^2 for i in 0..],repeating [2])
ccf := convergents cf
piConvergents := [4/p for p in ccf]
piConvergents :: Stream Float
continuedFraction((- 122 + 597*%i)/(4 - 4*%i))
r : Fraction UnivariatePolynomial(x,Fraction Integer)
r := ((x - 1) * (x - 2)) / ((x-3) * (x-4))
continuedFraction r
[i*i for i in convergents(z) :: Stream Float]

-- Input for page ForCollectionDetailPage
)clear all

u := [i^3 for i in 1..10]
u(4)
[8*i^3 for n in 1..5]
[u(2*n) for n in 1..5]
[u(i) for i in 1..10 | even? i]
[x for x in u | even? x]

-- Input for page ForStreamDetailPage
)clear all

u := [i^3 for i in 1..]
u(4)
u
u(16)
[i^3 for i in 0.. | even? i]
[8*i^3 for i in 0..]
[i^3 for i in 0.. by 2]
[u(i) for i in 1.. | even? i]
[u(2*i) for i in 1..]
[x for x in u | even? x]
