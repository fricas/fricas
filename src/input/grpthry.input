
-- Input for page PermutationGroupsPage
)clear all

x : PERM INT := [[1,3,5],[7,11,9]]
y : PERM INT := [[3,5,7,9]]
z : PERM INT := [1,3,11]
g1 : PERMGRP INT := [ x , y ]
g2 : PERMGRP INT := [ x , z ]
g3 : PERMGRP INT := [ y , z ]
order g1
degree g3
movedPoints g2
orbit (g1, 3)
orbits g3
member? ( y , g2 )
)sh PERMGRP

-- Input for page IrrRepSymPage
)clear all

ptn9 := partitions 9
map(dimensionOfIrreducibleRepresentation, ptn9)
yt := listYoungTableaus [4,2]; [tableau(listOfLists(ti)) for ti in yt]
r1 := irreducibleRepresentation([4,2],[1,2,4,5,3,6])
r2 := irreducibleRepresentation([4,2],[3,2,1,5,6,4])
r3 := irreducibleRepresentation([4,2],[4,2,1,3,6,5])
(r3 = r1*r2) :: Boolean
irreducibleRepresentation [4,4,1]

-- Input for page REP1Page
)clear all

permutationRepresentation [2,3,1,4,6,5,11,10,7,8,9]
gm2 := createGenericMatrix 2
symmetricTensors (gm2,2)
gm3 := createGenericMatrix 3
antisymmetricTensors (gm3,2)
tensorProduct(gm2,gm2)
)sh REP1

-- Input for page REP2Page
)clear all

r0 := irreducibleRepresentation [2,2,2,1,1];
r28 := meatAxe (r0::(LIST MATRIX PF 2))
areEquivalent? (r28.1, r28.2)
meatAxe r28.2
isAbsolutelyIrreducible? r28.2
ma := meatAxe r28.1
isAbsolutelyIrreducible? ma.1
isAbsolutelyIrreducible? ma.2

-- Input for page PermutationsPage
)clear all

px : PERM PF 29 := cycles [[1,3,5],[7,11,9]]
py : PERM PF 29 := cycles [[3,5,7,9]]
pz : PERM PF 29 := cycle [1,3,11]
px * pz
py ^ 3
inv px
order px
movedPoints py
orbit ( pz , 3 )
eval ( py , 7 )
)sh PERM

