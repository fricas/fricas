)set break resume
)expose UnittestCount UnittestAux Unittest

testsuite "series"

testcase "bernoulli numbers"

s1 := series(n +-> bernoulli(n)/factorial(n), t=0)
s2 := series(t/(exp(t) - 1), t=0)
testEquals("entries(complete(first(terms(s1), 20)))",
           "entries(complete(first(terms(s2), 20)))")

testcase "formal derivatives"

f := operator 'f
g := operator 'g
h := operator 'h
e1 := f(x)*g(x)
ss := series(e1, x = a);
c1_3 := (f(a)*D(g(a),a, 3)+g(a)*D(f(a),a, 3)+3*D(f(a),a)*D(g(a),a,2) _
  +3*D(g(a),a)*D(f(a),a, 2))/6
testEquals("coefficient(ss, 3)", "c1_3")

e2 := f(g(x))
ss := series(e2, x = a);
c2_3 := (eval(D(f(x), x), x = g(a))*D(g(a),a, 3) + _
   D(g(a),a)^3*eval(D(f(x), x, 3), x = g(a)) + _
   3*D(g(a),a)*eval(D(f(x), x, 2), x = g(a))*D(g(a),a,2))/6
testEquals("coefficient(ss, 3)", "c2_3")

e3 := h(x, x^2)
ss := series(e3, x = a);
hyy := eval(D(h(a, y), y, 2), y = a^2)
hy  := eval(D(h(a, y), y), y = a^2)
hxx := eval(D(h(x, a^2), x, 2), x = a)
hxy := eval(D(h(x, y), [x, y]), [x = a, y = a^2])
c3_2 := (4*a^2*hyy + 4*a*hxy + hxx + 2*hy)/2
testEquals("coefficient(ss, 2) - c3_2", "0")

testcase "prodiag"

l1 := [1, 1, 1, 2, 2, 3, 4, 5, 6, 8, 10];
sI := Stream(Integer)
sT := StreamTaylorSeriesOperations(Integer)
s1 : sI := concat(1, empty()$sI);
ss1 := repeating([s1]);
testEquals("entries(complete(first(prodiag(ss1)$sT, 11)))", "l1")

l2 := [1, -1, 0, -2, -1, -4, -2, -5, -1, -4, 3];
s2 := repeating([1])$sI
ms2 := repeating([-1])$sI
ss2 := repeating([ms2, s2]);
testEquals("entries(complete(first(prodiag(ss2)$sT, 11)))", "l2")

testcase "inverse"

p:=(1/2+n)::UTS(FRAC INT, 'n, 0)
testEquals("[coefficient((p^(-1))$UTS(FRAC INT, 'n, 0), i) for i in 0..5]",
           "[2, -4, 8, -16, 32, -64]")

testcase "crashes coercing power series (#122, #136)"
a := series(sin(x))
-- testTrue("(a + 1.0; true)")
-- testTrue("(1.0 + a; true)")
testTrue("(a*1.0; true)")
testTrue("(1.0*a; true)")

b := 1.0::UnivariatePuiseuxSeries(Expression Float,x,0.0)
testTrue("(b + 1.0; true)")
testTrue("(1.0 + b; true)")
testTrue("(a + b; true)")
testTrue("(b + a; true)")
testTrue("(a*b; true)")
testTrue("(b*a; true)")

b:= a::UnivariatePuiseuxSeries(Expression Float,x,0.0)
testTrue("(a + b; true)")
testTrue("(b + a; true)")
testTrue("(a*b; true)")
testTrue("(b*a; true)")

testcase "crash in seriesSolve"
f := operator f
de := x^2*f(x)^3*D(f(x), x, 4) - 16*f(x)^2*D(f(x), x)^2
testLibraryError("seriesSolve(de, f, x = 0, [1, 0, 0, 0])")

testcase "odes"

-- We will solve  y''' = sin(y'') * exp(y) + cos(x)
-- subject to y(0) = 1, y'(0) = 0, y''(0) = 0

y := operator 'y

eq := differentiate(y x, x, 3) - sin differentiate(y x, x, 2) * exp y x
           = cos x

res := seriesSolve(eq, y, x = 0, [1, 0, 0]);
es1 := [1, 0, 0, 1/6, %e/24, (%e^2 - 1)/120, (%e^3 - 2*%e)/720,
        (%e^4 - 8*%e^2 + 4*%e + 1)/5040]
testEquals("[coefficient(res, i) for i in 0..7]", "es1")

eq2 := D(y x,x) - x*cos(y x) - exp(x)
res := seriesSolve(eq2, y, x=0, y(0) = 0);
p1 := univariate(polynomial(res, 15));
p2 := univariate(polynomial(cos(res), 15));
p3 := univariate(polynomial(taylor(exp(x), x = 0), 15));
testEquals("minimumDegree(D(p1, x) - monomial(1, 1)$SUP(EXPR(INT))*p2 - p3)",
           "15")

R := EXPR INT
uts := UTS(R,'x,0)
foo: uts -> uts
foo y ==
  xx := monomial(1,1)$uts
  xx * cos(y) + exp(xx)
res2 := ode1(foo,0)$UTSODE(R,uts);
xs : uts := x
cc := differentiate(res2, x) - (xs*cos(res2) + exp(xs));
testEquals("polynomial(cc, 20)", "0")
testEquals("polynomial(res2 - res, 20)", "0")

--
airy := differentiate(y x, x, 2) - x * y x

res := seriesSolve(airy, y, x = 0, [a0, a1]);
es2 := [a0, a1, 0, a0/6, a1/12, 0, a0/180, a1/504]
testEquals("[coefficient(res, i) for i in 0..7]", "es2")

-- We can solve around other points than x = 0
res := seriesSolve(airy, y, x = 1, [a0, a1]);
es3 := [a0,a1,a0/2,(a1+a0)/6,(2*a1+a0)/24,(a1+4*a0)/120,
          (6*a1+5*a0)/720,(11*a1+9*a0)/5040];
testEquals("[coefficient(res, i) for i in 0..7]", "es3")

-- System of equations for tan(t) and sec(t)
z := operator 'z
eq1 := differentiate(z t, t) = 1 + z(t)^2
eq2 := differentiate(y t, t) = z(t) * y(t)
res := seriesSolve([eq2, eq1], [z, y], t = 0, [y 0 = 1, z 0 = 0]);
ts := taylor(tan(t), t = 0);
ss := taylor(sec(t), t = 0);

testEquals("polynomial(res(1), 15)", "polynomial(ts, 15)")
testEquals("polynomial(res(2), 15)", "polynomial(ss, 15)")

-- System of equations for a damped pendulum of mass and length 1:
eq1 := differentiate(z t, t) = y t
eq2 := differentiate(y t, t) = - g * sin(z t) - c * y t
res := seriesSolve([eq1, eq2], [z, y], t = 0, [y 0 = a, z 0 = b]);
p1 := polynomial(res(1), 15);
p2 := polynomial(res(2), 15);
p3 := polynomial(sin(res(1)), 15);
t15 := minimumDegree(t^15)
testEquals("minimumDegree(D(p1, t) - p2)", "t15")
testEquals("minimumDegree(D(p2, t) + g*p3 + c * p2)", "t15")

statistics()
