--Copyright The Numerical Algorithms Group Limited 1994.
-- ntube.input
-- Generalized tubes.
-- The functions in this file draw a 2-d curve in the normal
-- planes around a 3-d curve.  The computations are all done
-- numerically in machine-precision floating point for efficiency.

R3 := Point DoubleFloat                  -- Points in 3-Space
R2 := Point DoubleFloat                  -- Points in 2-Space
S := Segment Float              -- Draw ranges
ThreeCurve := DoubleFloat -> R3          -- type of a space curve function
TwoCurve := (DoubleFloat, DoubleFloat) -> R2      -- type of a plane curve function
Surface := (DoubleFloat, DoubleFloat) -> R3   -- type of a parameterized surface function

-- Frenet frames define a coordinate system around a point on a space curve
FrenetFrame := Record(value: R3, tagent: R3, normal: R3, binormal: R3)

-- Holds current Frenet frame for a point on a curve
frame: FrenetFrame

-- compile, don't interpret functions
)set fun compile on

-- Draw a generalized tube.
-- ntubeDraw(spaceCurve, planeCurve, u0..u1, t0..t1)
-- draws planeCurve int the normal planes of spaceCurve.  u0..u1 specifies
-- the paramter range of the planeCurve and t0..t1 specifies the parameter
-- range of the spaceCurve.  Additionally the plane curve function takes
-- as a second parameter the current parameter of the spaceCurve.  This
-- allows the plane curve to evolve as it goes around the space curve.
-- see "page5.input" for an example of this.
ntubeDraw: (ThreeCurve, TwoCurve, S, S) -> VIEW3D
ntubeDraw(spaceCurve, planeCurve, uRange, tRange) ==
  ntubeDrawOpt(spaceCurve, planeCurve, uRange, tRange, []$List DROPT)

-- ntuberDrawOpt is the same as ntuberDraw, but takes optional
-- parameters which it passes to the draw command.
ntubeDrawOpt: (ThreeCurve, TwoCurve, S, S, List DROPT) -> VIEW3D
ntubeDrawOpt(spaceCurve, planeCurve, uRange,  tRange, l) ==
  delT:DoubleFloat := (high(tRange) - low(tRange))/10000
  oldT:DoubleFloat := low(tRange) - 1
  fun := ngeneralTube(spaceCurve, planeCurve, delT, oldT)
  draw(fun, uRange, tRange, l)

-- nfrenetFrame(c, t, delT) numerically computes the Frenet Frame
-- about the curve c at t.  delT is a small number used to
-- compute derivatives.
nfrenetFrame(c, t, delT) ==
  f0 := c(t)
  f1 := c(t+delT)
  t0 := f1 - f0                -- the tangent
  n0 := f1 + f0
  b := cross(t0, n0)           -- the binormal
  n := cross(b,t0)             -- the normal
  ln := length n
  lb := length b
  ln = 0 or lb = 0 => error "Frenet Frame not well defined"
  n := (1/ln)*n                -- make into unit length vectors
  b := (1/lb)*b
  [f0, t0, n, b]$FrenetFrame

-- nGeneralTube(spaceCurve, planeCurve, delT, oltT)
-- creates a function which can be passed to the system draw command.
-- The function is a parameterized surface for the general tube
-- around the spaceCurve.  delT is a small number used to compute
-- derivatives, and oldT is used to hold the current value of the
-- t parameter for the spaceCurve.  This is an efficiency measure
-- to ensure that frames are only computed once for every value of t.
ngeneralTube: (ThreeCurve, TwoCurve, DoubleFloat, DoubleFloat) -> Surface
ngeneralTube(spaceCurve, planeCurve, delT, oldT) ==
  free frame
  (v:DoubleFloat, t: DoubleFloat): R3 +->
    if (t ~= oldT) then
      frame := nfrenetFrame(spaceCurve, t, delT)
      oldT := t
    p := planeCurve(v, t)
    frame.value + p.1*frame.normal + p.2*frame.binormal
