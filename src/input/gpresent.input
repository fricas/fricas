-- regression tests for code in gpresent.spad

)set break resume
)expose UnittestCount UnittestAux Unittest

)expose GroupPresentation

testsuite "gpresent"

-- first we try each simplification rule in its simplest
-- form then we try combinations.

testcase "simplification - remove one generator"
triv := groupPresentation([],[])
t1 := simplify(groupPresentation([1],[[1]]))
testEquals("triv", "t1")

testcase "simplification - repeated remove one generator"
triv := groupPresentation([],[])
t2 := simplify(groupPresentation([1,2],[[1],[2]]))
testEquals("triv", "t2")

testcase "simplification - cancel empty"
triv := groupPresentation([],[])
t3 := simplify(groupPresentation([0],[[0]]))
testEquals("triv", "t3")

testcase "simplification - cancel inverse"
triv := groupPresentation([],[])
t4 := simplify(groupPresentation([1],[[1],[-1]]))
testEquals("triv", "t4")

testcase "simplification - 2 element rule"
free1 := groupPresentation([1],[])
t5 := simplify(groupPresentation([1,2],[[1,2]]))
testEquals("free1", "t5")

testcase "simplification - minimise inverses"
free3 := groupPresentation([1,2,3],[[1,2,3]])
t6 := simplify(groupPresentation([1,2,3],[[-3,-2,-1]]))
testEquals("free3", "t6")

testcase "simplification - substitution"
square := groupPresentation([1,2,3,4,5],[[1,3,5],[2,3,4]])
t6 := simplify(square)
expected := groupPresentation([1,2,4,5],[[2,-1,-5,4]])
testEquals("expected", "t6")

testcase "simplification - remove duplicate rule"
x := groupPresentation([1,2,3],[[1,2,3],[1,2,3]])
t6 := simplify(x)
expected := groupPresentation([1,2,3],[[1,2,3]])
testEquals("expected", "t6")
y := groupPresentation([1,2,3],[[1,2,3],[-3,-2,-1]])
t7 := simplify(y)
testEquals("expected", "t7")
z := groupPresentation([1,2,3],[[1,2,3],[2,3,1]])
t8 := simplify(z)
testEquals("expected", "t8")
a := groupPresentation([1,2,3],[[1,2,3],[2,3,1],[-3,-2,-1]])
t9 := simplify(a)
testEquals("expected", "t9")
b := groupPresentation([1,2,3,4,5,6],[[1,2,3],[4,5,6],[4,5,6]])
t10 := simplify(b)
expected2 := groupPresentation([1,2,3,4,5,6],[[1,2,3],[4,5,6]])
testEquals("expected2", "t10")
c := groupPresentation([1,2,3,4,5,6],[[4,5,6],[1,2,3],[4,5,6]])
t11 := simplify(c)
testEquals("expected2", "t11")
d := groupPresentation([1,2,3,4,5,6],[[4,5,6],[4,5,6],[1,2,3]])
t12 := simplify(d)
testEquals("expected2", "t12")

-- more complicated simplifications

testcase "complicated simplification"
c1 := groupPresentation([1,2,3,4,5,6,7],[[1],[0],_
     [2,4,5],[2,4,7],[2,6],[2,6,7],[3,4,6],[3,5,6],[3,4,7],_
     [3,7],[4,5],[4,6],[5,6,7],[5,7]])
t7 := simplify(c1)
expected := groupPresentation([],[])
testEquals("expected", "t7")

-- direct product and quotient

testcase "direct product"
a := groupPresentation([1],[])
t8 := directProduct(a,a)
expected := groupPresentation([1,2],[[1,2,1,2]])
testEquals("expected", "t8")
expected2 := groupPresentation([2],[[2,2]])
t9 := quotient(t8,[1])
testEquals("expected2", "t9")
t10 := quotient(t8,[[1]])
testEquals("expected2", "t10")

-- conversions to PermutationGroup

testcase "PermutationGroup conversions cyclic group"

c5a := cyclicGroup(5)$PermutationGroupExamples
c5b := cyclicGroup(5)$GroupPresentation
c5c := toPermutationIfCan(c5b) :: PermutationGroup(Integer)
c5r := relationsInGenerators(c5a)
c5d := groupPresentation([1], c5r)$GroupPresentation
c5e := toPermutationIfCan(c5d)::PermutationGroup(Integer)

testEquals("c5a", "c5c")
testEquals("c5c", "c5e")

testcase "PermutationGroup conversions dihedral group"

d3a := dihedralGroup(3)$PermutationGroupExamples
d3b := dihedralGroup(3)$GroupPresentation
d3c := toPermutationIfCan(d3b) :: PermutationGroup(Integer)
d3r := relationsInGenerators(d3a)
d3d := groupPresentation([1, 2], d3r)$GroupPresentation
d3d := simplify(d3d)
d3e := toPermutationIfCan(d3d)::PermutationGroup(Integer)

testEquals("order(d3a)", "order(d3c)")
testEquals("order(d3c)", "order(d3e)")

testcase "symmetric group"

s4a := symmetricGroup(4)$PermutationGroupExamples
s4b := symmetricGroup(4)$GroupPresentation
s4c := toPermutationIfCan(s4b) :: PermutationGroup(Integer)
s4r := relationsInStrongGenerators(s4a)
s4d := groupPresentation([1, 2, 3], s4r)$GroupPresentation
s4e := toPermutationIfCan(s4d)::PermutationGroup(Integer)
s4f := toPermutationIfCan(s4b, [[2], [3]], false
                         )::PermutationGroup(Integer)
s4pers := [[1, 2], [2, 3], [3, 4]]::List(Permutation(Integer))
s4g := permutationGroup(s4pers)
testEquals("order(s4c)", "24")
testEquals("order(s4e)", "24")
testEquals("s4g", "s4f")

a5a := alternatingGroup(5)$PermutationGroupExamples
a5r := relationsInStrongGenerators(a5a)
a5c := groupPresentation([1, 2, 3], a5r)$GroupPresentation
a5d := toPermutationIfCan(a5c)::PermutationGroup(Integer)

testEquals("order(a5d)", "60")

j2 := janko2()$PermutationGroupExamples
j2r := relationsInStrongGenerators(j2);
j2p := groupPresentation([1, 2, 3, 4], j2r);
j2per := toPermutationIfCan(j2p, [[1], [2], [3]], false
                           )::PermutationGroup(Integer);
testEquals("#movedPoints(j2per)", "100")
testEquals("order(j2per)", "604800")

s4r2 := relationsInGenerators(s4a)
s4gen := generators(s4a)
ielt(a, i) == (i > 0 => elt(a, i); inv(elt(a, -i)))
-- test that all relations are valid
for rel in s4r2 repeat
    prod := reduce(_*, [ielt(s4gen, i) for i in rel], 1$PERM(INT))
    testEquals("prod", "1$PERM(INT)")

statistics()

