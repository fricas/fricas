)set break resume
)expose UnittestCount UnittestAux Unittest

---
--- april 2008
---

)expose VSBASIS

testsuite "vsbasis"
testcase "basic properties"

VFI ==> Vector Fraction Integer
MFI ==> Matrix Fraction Integer
VSB ==> VectorSpaceBasis Fraction Integer

bc3 := canonicalBasis 3 :: List VFI
u : VFI := vector [1,0,-1]
v : VFI := vector [2,1,2]
w : VFI := vector [1,2,1]

-- F = {(x,y,z)|x+y+z=x-y+z=0}
MF : MFI := matrix [[1,1,1],[1,-1,1]]
F := (nullSpace MF)$VSB                            -- a basis is (-1,0,1)
solve (matrix [[2,1,2],[1,2,1]]$MFI, vector [0,0,0])
-- G = vect(v,w)
G := basis [v, w]                               -- this family is a basis
testTrue("isBasis?([v,w])")

-- search (a,b,c) | F = R(a,b,c)
-- (a,b,c) matches for v and w,
-- so (a,b,c) in the nullSpace of the matrix of lines (2,1,2) and (1,2,1)
RES := nullSpace (transpose horizConcat (v::MFI,w::MFI)) $ VSB
testTrue("(F = RES)$VSB")


-- H = {(x,y,z)|x+2y+z=0}
MH : MFI := matrix [[1,2,1]]

-- a basis of the intersection of G and H
GH := intBasis ([v,w], nullSpace MH)              -- a basis is (-1,1,-1)
GH := intBasis ([[v,w], nullSpace MH])
GH := basis[v,w] * (nullSpace MH)$VSB

-- is u in F
-- transforms the canonical basis in linear expression of vectors u, v and w.
-- this is a decomposition over F+G : F = Ru and G = Rv+Rw
testTrue("member?(u, F)")
testTrue("(F = basis [u])$VSB")

BE := basis [u,v,w]
coordinates (bc3.1, BE)
coordinates (bc3.2, BE)
coordinates (bc3.3, BE)

-- are F and G complement space :
-- F intersect G = {(0,0,0)} and F + G = R^3
intBasis (F, G)
intBasis [F, G]
F * G
testTrue("((basis [])$VSB = F*G)$VSB")
sumBasis (F, G)
sumBasis ([F, G])
F + G
testTrue("(basis bc3 = BE)$VSB")

-- f(u)=v, f(v)=w and f(w)=u. The matrix of f in basis (u,v,w) is obvious.
-- Changing the basis in order to find the canonical basis of f.

MfBE : MFI := matrix [[0,0,1],[1,0,0],[0,1,0]]
PbcBE := reduce (horizConcat, [u,v,w]::List MFI)
PBEbc := PbcBE^-1
Mfbc := PbcBE * MfBE * PBEbc

-- these 3 matrices are equal.

reduce (horizConcat, map (v +-> (coordinates(v,BE))::MFI, bc3))
PBEbc
LRES := map (s +-> s.particular::MFI, solve (PbcBE, diagonalMatrix [1,1,1]))
reduce (horizConcat, LRES)

-- f o f o f = id and f^(-1)=f^2

Mfbc^2
Mfbc^3
Mfbc^-1
testTrue("(Mfbc^-1 = Mfbc^2)@Boolean")

testTrue("(Mfbc * u = v)@Boolean")
testTrue("(Mfbc * v = w)@Boolean")
testTrue("(Mfbc * w = u)@Boolean")

--
-- verify some subspaces
--

testcaseNoClear "subspaces"

H := nullSpace MH

lb1 := [subspace?(BE, F), subspace?(basis bc3, F), subspace?(GH, 0$VSB),
   subspace?(GH, F), subspace?(GH, G), subspace?(GH, basis H),
     subspace?(0$VSB, GH), subspace?(F, basis bc3)]

testEquals("lb1", "[false, false, false, false, true, true, true, true]")

--
-- find some complement spaces.
--

testcaseNoClear "complement spaces"

C0 := complementSpace (0$VSB, 3)
CGH := complementSpace GH
CF:= complementSpace F
CG := complementSpace G
CH := complementSpace H
CE1 := complementSpace BE
CE2 := complementSpace concat ([u,v,w], bc3)

complementSpace? (B1, B2) ==
  rank intBasis (B1, B2) = 0
    and rank sumBasis (B1, B2) = #concat (B1::List VFI, B2::List VFI).1

-- all the responses are true.

testTrue("complementSpace?(C0, 0$VSB)")
testTrue("complementSpace?(0$VSB, C0)")
testTrue("complementSpace?(CGH, GH)")
testTrue("complementSpace?(GH, CGH)")
testTrue("complementSpace?(CF, F)")
testTrue("complementSpace?(F, G)")
testTrue("complementSpace?(CG, G)")
testTrue("complementSpace?(CH, basis H)")
testTrue("complementSpace?(CE1, BE)")
testTrue("complementSpace?(CE2, BE)")
testTrue("not complementSpace?(F, basis H)")

statistics()

