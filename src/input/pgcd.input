)set break resume
)expose UnittestCount UnittestAux Unittest

testsuite "polynomial gcd"

testcase "simple example"

p := 3*x^8 + 2*x^7 + 6*x^2 + 7*x + 2
q := 2*x^13 + 9*x^7 + 2*x^6 + 10*x + 5
testEquals("gcd(p,q)", "x^7 + 2*x + 1")
testEquals("resultant(p, q, x)", "0")

testcase "bad reduction"

p1 := x^6*(50*y^8 -68*y^6 -104*y^4 + 36*y^2 + 22) + _
      x^4*(12*y^8 -10*y^6 -64*y^4 -6*y^2 + 4) + _
      x^2*(2*y^6 -14*y^4 -8*y^2) + (-y^4 - y^2)
p2 := x^8*(16*y^10 + 16*y^8 -96*y^6 -224*y^4 -176*y^2 -48) + _
      x^6*(-72*y^10 + 188*y^8 -188*y^6 -572*y^4 -108*y^2 + 16) + _
      x^4*(-64*y^10 + 188*y^8 + 372*y^6 + 60*y^4 -124*y^2) + _
      x^2*(68*y^8 + 172*y^6 + 97*y^4 -15*y^2) + _
      (8*y^8 + 22*y^6 + 14*y^4)
p1u := univariate(p1, x)
p2u := univariate(p2, x)
testTrue("(lg := [gcd(p1u, p2u) for i in 1..1000]; true)")
testTrue("every?(x +-> x = 1, lg)")

)set output algebra on
statistics()
