)set break resume
)expose UnittestCount UnittestAux Unittest

testsuite "bugs2017"

testcase "latex(1)"

testEquals("latex(1)", "_"1_"")

testcase "~= in interpreter"

testTrue("(x~=y)$Expression(Integer)")

testcase "simplification of embedded roots"

testEquals("rootSimp(sqrt(2 * sqrt(a^4)))", "a*sqrt(2)")

testEquals("rootSimp(exp(x/sqrt(x^2)-1))", "1")

testEquals("rootPower(atan(2*(x^(1/6))^3))", "atan(2*sqrt(x))")

testEquals("rootPower(exp(x^(1/6)*(x^(1/12))^2))", "exp(x^(1/3))")

testEquals("rootPower(sqrt((x^(1/6))^3 + 1))", "sqrt(sqrt(x) + 1)")

testEquals("rootPower(exp(sqrt(x)/(x^(1/6))^3 - 1))", "1")

testEquals("rootPower(sqrt(sqrt(x)/(x^(1/6))^3 - 1))", "0")

testEquals("rootProduct(sin((x^(1/4))^2*x^(1/5)))", "sin(x^(7/10))")

testcase "linear algebra with empty matrices"

emi := empty()$Matrix(Integer)
qF := Fraction(Integer)
emq := empty()$Matrix(qF)

testEquals("determinant(emi)", "1")
testEquals("determinant(emq)", "1")
testEquals("minordet(emi)", "1")
testEquals("minordet(emq)", "1")
testEquals("inverse(emi)", "emq")
testEquals("inverse(emq)", "emq")
testEquals("invertIfCan(emi)", "emi")
ai := adjoint(emi)
testEquals("ai.adjMat", "emi")
testEquals("ai.detMat", "1")
aq := adjoint(emq)
testEquals("aq.adjMat", "emq")
testEquals("aq.detMat", "1")
vQF := Vector(qF)
iMF := InnerMatrixLinearAlgebraFunctions(qF, vQF, vQF, Matrix(qF))
testEquals("generalizedInverse(emq)$iMF", "emq")


)set output algebra on
statistics()
