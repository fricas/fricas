)set break resume
)expose UnittestCount UnittestAux Unittest

testsuite "bugs2018"

testcase "leading coefficient in MULTSQFR"

pol := ((a+c)^2*d + b)^4*(d - b)^2*((a - c)^8*d - b);

flist := factors(squareFree(pol))

testEquals("flist(1).factor", "d - b")
testEquals("flist(1).exponent", "2")
testEquals("flist(2).factor", "(a+c)^2*d + b")
testEquals("flist(2).exponent", "4")

testcase "simplify nested radicals in rootPower"

testEquals("rootPower(sqrt sqrt 2)", "2^(1/4)")
testEquals("rootPower(((sqrt 7)^(1/5))^4)", "7^(2/5)")

testcase "'exquo' in FR"

testTrue("(factor(5) exquo factor(3)) case _"failed_"")

testcase "'construct' in MRING"

T := MonoidRing(Integer, Integer)
R := Record(k : Integer, c : Integer)
testTrue("(s := construct([[2, 1]::R, [3, 2]::R])$T; true)")
e1 := construct([[2, 1]::R])$T
e2 := construct([[3, 2]::R])$T
testEquals("e1 + e2", "s")

testcase "'leaf?'"

testTrue("not(leaf?([]))")
testTrue("leaf?([1])")

testcase "recursion in 'has'"

E := DirectProduct(3, NNI)
a1 := unitVector(1)$E
testEquals("subtractIfCan(a1, a1)", "0")

testcase "'^' for Factored"

testEquals("factor(6)^0", "1")

testcase "stack overflow in SparseUnivariateTaylorSeries"

R ==> Record(k : NNI, c : INT)
S ==> Stream R

h(r : R) : R == [r.k + 1, 2 * r.c]$R
s : S := stream(h, [1, 1]$R)
s1 := series(s)$SparseUnivariateTaylorSeries(INT, 'x, 0)
testEquals("s1.10", "512")

testcase "factor"

pF := PrimeField(7) 
testEquals("#factors(factor(univariate((l^2 + 4*l + 1)::POLY(pF), l)))",
           "1")

testEquals("eigenvalues(matrix([[4, 3],[1, 1]])$Matrix(pF))", "[6]")

ev2 := eigenvalues(matrix([[2, 3],[1, 2]])$Matrix(pF))
testEquals("#ev2", "1")
testEquals("coefficients(rhs(ev2(1)::SuchThat(Symbol, POLY(pF))))",
           "[1, 3, 1]")

testcase "'makeFR' with zero factors in arguments"

testEquals("makeFR(0, [[_"nil_", 2, 3]])$FR(INT)", "0")

testEquals("makeFR(1, [[_"nil_", 0, 3]])$FR(INT)", "0")

testcase "'map' for Factored"

fl := factorList map(x+->x+3, factor(6))
testTrue("fl.first.flag case _"nil_"")
testEquals("fl.first.factor", "4")

)set output algebra on

statistics()
