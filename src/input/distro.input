)set break resume
)expose UnittestCount UnittestAux Unittest
testsuite "distro"
testcase "SEQU"
ss:Sequence Integer:= sequence repeating [1]
ss2:= ss+ss
ss3:=2*ss
ss4:=ss*2
testEquals("firstn(ss2,10)", "firstn(ss3,10)")
testEquals("firstn(ss3,10)", "firstn(ss4,10)")
ss2a:=map(x+-> 1/x, ss2)$SequenceFunctions2(Integer, Fraction Integer) --$
ss2b:Sequence Fraction Integer := sequence repeating [1/2]
testEquals("firstn(ss2a,10)", "firstn(ss2b,10)")
testcase "PATHARR"
-- Catalan numbers
)expose PARRPKG
aa:= repeating [1]
bb:= repeating [0]
cc:= repeating [1]
jj:= motzkinPathArray(aa, bb, cc)
cat0:= bottom jj
cat1:= cons(1,[(if odd? k then 0 else catalan(exquo(k, 2)::Integer)) for k in 1..])
cat0a:= entries complete first(cat0, 10)
cat1a:= entries complete first(cat1, 10)
testEquals("cat0a", "cat1a")

-- normal law
aa:= repeating [1]
bb:= repeating [0]
cc:= [k for k in 1..]
jj:= motzkinPathArray(aa, bb, cc)
mg0a:=entries complete first(bottom jj, 10)
gaussk:Sequence Integer := sequence concat([0, 1], repeating [0])
gaussm:= cumulant2moment(gaussk)$MOMPKG Integer
mg:=cons(1, gaussm)
mg1a:= firstn(mg, 10)
testEquals("mg0a", "mg1a")

-- Poisson law
aa:= repeating [1]
bb:= [k for k in 1..]
cc:= [k for k in 1..]
jj:= motzkinPathArray(aa, bb, cc)
mp0a:=entries complete first(bottom jj, 10)
poissk:Sequence Integer := sequence repeating [1]
poissm:= cumulant2moment(poissk)$MOMPKG Integer
mp:=cons(1, poissm)
mp1a:= firstn(mp, 10)
testEquals("mp0a", "mp1a")
testcase "MOMPKG"
)expose MOMPKG
R:= Expression Integer
mm:Sequence R := sequence [m[k] for k in 1..]
cc:Sequence R := sequence [c[k] for k in 1..]
c2m2c := moment2cumulant cumulant2moment cc
testEquals("firstn(cc, 5)", "firstn(c2m2c, 5)")
m2c2m := cumulant2moment moment2cumulant mm
testEquals("firstn(mm, 5)", "firstn(m2c2m, 5)")
c2m2c := moment2freeCumulant freeCumulant2moment cc
testEquals("firstn(cc, 5)", "firstn(c2m2c, 5)")
m2c2m := freeCumulant2moment moment2freeCumulant mm
testEquals("firstn(mm, 5)", "firstn(m2c2m, 5)")
c2m2c := moment2booleanCumulant booleanCumulant2moment cc
testEquals("firstn(cc, 5)", "firstn(c2m2c, 5)")
m2c2m := booleanCumulant2moment moment2booleanCumulant mm
testEquals("firstn(mm, 5)", "firstn(m2c2m, 5)")

-- semicircle distribution
sfc:Sequence Integer:= sequence concat([0,1], repeating [0])
smm:= [(if odd? k then 0 else catalan(exquo(k, 2)::Integer)) for k in 1..10]
testEquals("firstn(freeCumulant2moment sfc, 10)", "smm")
-- Hankel determinants
shd:=[hankelDeterminant(freeCumulant2moment sfc, k) for k in 1..10]
testEquals("removeDuplicates shd", "[1]")

-- coercion
w1:Distribution Integer:= wignerDistribution 1
w2:Distribution Expression Integer:= wignerDistribution 1
w2a:= w1::Distribution Expression Integer
testEquals("firstn(moments w2, 10)","firstn(moments w2a, 10)")
-- jacobi parameters of semicircle
sfc1:Sequence Fraction Integer:= sequence concat([0,1], repeating [0])
smm1:=freeCumulant2moment sfc1
sjc:=moment2jacobi smm1
testEquals("removeDuplicates entries complete first(sjc an, 10)", "[0]")
testEquals("removeDuplicates entries complete first(sjc bn, 10)", "[1]")

-- free poisson has free cumulants all equal to one
fpm:Sequence Integer := sequence [catalan k for k in 1..]
testEquals("removeDuplicates firstn(moment2freeCumulant fpm, 10)", "[1]")

-- S transform of free Poisson
fpm1:Sequence Fraction Integer := sequence [catalan k for k in 1..]
fps1:=moment2Stransform fpm1
fps2:List Fraction Integer:=[(-1)^k for k in 0..9]
testEquals("firstn(fps1 coef, 10)", "fps2")
testcase "DISTRO"
mm:Sequence Expression Integer := sequence [m[k] for k in 1..]
cc:Sequence Expression Integer := sequence [c[k] for k in 1..]
kk:Sequence Expression Integer := sequence [k[i] for i in 1..]
bb:Sequence Expression Integer := sequence [b[k] for k in 1..]

dm:=distributionByMoments mm
dk:=distributionByClassicalCumulants kk;
dc:=distributionByFreeCumulants cc;
db:=distributionByBooleanCumulants bb;

dmk := distributionByClassicalCumulants classicalCumulants dm
testEquals("firstn(moments dmk, 10)", "firstn(mm,10)")

dmc := distributionByFreeCumulants freeCumulants dm
testEquals("firstn(moments dmc, 10)", "firstn(mm,10)")

dmb := distributionByBooleanCumulants booleanCumulants dm
testEquals("firstn(moments dmb, 10)", "firstn(mm,10)")

dkm:=  distributionByMoments moments dk;
testEquals("firstn(classicalCumulants dkm, 10)", "firstn(kk,10)")

sem:= wignerDistribution 1
sem2:= freeConvolution(sem,sem)
sem2j:=jacobiParameters sem2
testEquals("removeDuplicates entries complete first(sem2j bn,10)", _
    "[2::Fraction Integer]")

frp:=freePoissonDistribution 1
frpj:=jacobiParameters frp

gss:=gaussianDistribution 1
gss2:= classicalConvolution(gss,gss)
gss2j:=jacobiParameters gss2
gss2j1:=[2*k for k in 1..10]
testEquals("removeDuplicates entries complete first(gss2j bn,10)", "gss2j1")

--  monotone convolution of arcsin results in a dilation
bin2n:= [binomial(2*n,n) for n in 1..]
asin:Sequence Integer:= sequence [(if odd? k then 0 else bin2n
        (exquo(k,2)::Integer)) for k in 1..]
asind:= distributionByMoments [(if odd? k then 0 else bin2n (exquo(k,2)::Integer)) for k in 1..]
asind2:=monotoneConvolution(asind, asind)
asind4:=monotoneConvolution(asind2, asind2)
asind4d:=dilate(2, moments asind)
testEquals("firstn (moments asind4, 10)", "firstn (asind4d, 10)")

-- monotone cumulants of arcsine distribution
asin1:Distribution Fraction Integer:=arcsineDistribution 1
asin1m:=monotoneCumulants asin1
asin1m10:List Fraction Integer:= [(if k = 2 then 1 else 0) for k in 1..10]
testEquals("firstn(asin1m, 10)", "asin1m10")

-- semicircle^2 = free Poisson
sem:=wignerDistribution 1
fps:=freePoissonDistribution 1
fps1:=sem^2
fps0m:= moments fps
fps1m:= moments fps1
testEquals("firstn(fps0m, 10)", "firstn(fps1m, 10)")
testcase "STRANS"

-- S transform of free Poisson
R:= Fraction Integer
macro STrans(x, z) ==
    STransform(x)$STransformPackage(R, UTS(R, z, 0), ULS(R, z, 0), UPXS(R, z, 0)) --$
fp:Distribution R:=freePoissonDistribution 1
fpS:=STrans (fp, z)
fpS1:= entries complete first(coefficients fpS, 10)
fpS2:= [(-1)^k for k in 0..9]
testEquals("fpS1", "fpS2")
-- get free Poisson from S-transform
fp2S:Sequence Fraction Integer:= sequence [(-1)^k for k in 0..]
fp2:Distribution Fraction Integer:= distributionBySTransform(1,0, fp2S)$Distribution Fraction Integer
testEquals("firstn(moments fp2, 10)", "firstn(moments fp, 10)")

-- free multiplicative convolution of two projections
pa:Distribution EXPR INT:=bernoulliDistribution01 a
pb:Distribution EXPR INT:=bernoulliDistribution01 b
papb:=freeMultiplicativeConvolution(pa,pb);
papbm1:=entries complete first(moments papb, 10);
-- the mgf of the result should be
aa:=a+b-2*a*b+sqrt(4*a*b*(1-a)*(1-b))
bb:=a+b-2*a*b-sqrt(4*a*b*(1-a)*(1-b))
Mpapb:=(1-z*(a+b)-sqrt((aa*z-1)*(bb*z-1)))/2/(z-1)
papbser:=series(Mpapb,z=0);
papbm2:=entries complete first (rest coefficients papbser, 10);
testEquals("papbm1","papbm2")

-- polynomial evaluation
p2:UnivariatePolynomial(z, Integer):= z^2
sem:= wignerDistribution 1
fp1:= freePoissonDistribution 1
fp2a:=p2(sem)
testEquals("firstn(moments fp1, 10)", "firstn(moments fp2a, 10)")

-- J continued fraction
R:= Fraction Integer
macro jcf1(x,z) ==
    JContinuedFraction(x,z)$DistributionContinuedFractionPackage(R, z)

sem1:Distribution R:= wignerDistribution 1
j1:=jcf1(sem1, z)
j1c5:=(convergents j1) 5
j1c5a:Fraction UP(z,Fraction Integer):= (z^3-2*z)/(z^4-3*z^2+1)
testEquals("j1c5", "j1c5a")

macro jcf2(x,z) ==
    JContinuedFraction(x,z)$DistributionContinuedFractionPackage(Integer, z)

sem2:Distribution Integer:= wignerDistribution 1
j2:=jcf2(sem2, z)
j2c5:=(convergents j2) 5
j2c5a:Fraction UP(z,Fraction Integer):= (z^3-2*z)/(z^4-3*z^2+1)
testEquals("j2c5", "j2c5a")

-- Orthogonal polynomials
mm:= [m[k] for k in 1..];
mu:= distributionByMoments mm;
op:= orthogonalPolynomials mu;
intp34:= integrate(op 2*op 3, mu)
testTrue("zero? intp34")

-- monotone cumulants 1
mm1:Stream Fraction Polynomial Integer:= [m[k] for k in 1..];
mu1:= distributionByMoments mm1;
mc:= monotoneCumulants mu1;
mm2:= distributionByMonotoneCumulants mc;
m15:= mm1.5;
m25:= moment(mm2, 5);
testEquals("m15", "m25")

-- monotone cumulants 2
)clear prop mu1 mu2 mm1 mm2 hh
hh:Stream Fraction Polynomial Integer:= [h[k] for k in 1..];
mu1:= distributionByMonotoneCumulants hh;
mm1:= moments mu1;
mu2:= distributionByMoments mm1;
h15:= hh.5;
h25:= monotoneCumulants(mu2).5
testEquals("h15", "h25")

-- orthogonal convolution identity
)clear prop mu nu mumnu muonu
mu := distributionByMoments([a[k] for k in 1..]);
nu := distributionByMoments([b[k] for k in 1..]);
mumnu := monotoneConvolution(mu, nu);
muonu := booleanConvolution(nu, orthogonalConvolution(mu, nu));
testEquals("firstn(moments mumnu, 10)", "firstn(moments muonu, 10)")

-- subordination convolution identity
)clear prop mu nu mufnu mumnu
mu := distributionByMoments([a[k] for k in 1..]);
nu := distributionByMoments([b[k] for k in 1..]);
mufnu := freeConvolution(mu, nu);
mumnu := monotoneConvolution(nu, subordinationConvolution(mu, nu));
testEquals("firstn(moments mufnu, 10)", "firstn(moments mumnu, 10)")


expected() ==
    messagePrint("testsuite | testcases: failed (total) | tests: failed (total)")$OutputForm
    messagePrint("distro                      0     (5)               0    (39)")$OutputForm

statistics()
expected()
