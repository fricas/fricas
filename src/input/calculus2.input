
-- Input for page FormalDerivativePage
)clear all

differentiate(f, x)
f := operator f
x := operator x
y := operator y
a := f(x z, y z, z^2) + x y(z+1)
dadz := differentiate(a, z)
eval(eval(dadz, 'x, z +-> exp z), 'y, z +-> log(z+1))
eval(eval(a, 'x, z +-> exp z), 'y, z +-> log(z+1))
differentiate(%, z)

-- Input for page SeriesArithmeticPage
)clear all

x := series x
num := 3 + x
den := 1 + 7 * x
num / den
base := 1 / (1 - x)
expon := x * base
base ^ expon

-- Input for page SeriesConversionPage
)clear all

f := sin(a*x)
series(f,x = 0)
g := y / (exp(y) - 1)
series(g)
h := sin(3*x)
series(h,x,x = %pi/12)
series(sqrt(tan(a*x)),x = 0)
series(sec(x) ^ 2,x = %pi/2)
bern := t * exp(t*x) / (exp(t) - 1)
series(bern,t = 0)
series(exp(2 + tan(y)), y=0)

-- Input for page LaplacePage
)clear all

f n == t^(n-1)*exp(-a*t)/factorial(n-1)
laplace(f 2, t, s)
laplace(f 5, t, s)
sin(a*t) * cosh(a*t) - cos(a*t) * sinh(a*t)
laplace(%, t, s)
laplace((exp(a*t) - exp(b*t))/t, t, s)
laplace(2/t * (1 - cosh(a*t)), t, s)
laplace(2/t * (1 - cos(a*t)), t, s)
laplace(exp(-a*t) * sin(b*t) / b^2, t, s)
laplace((cos(a*t) - cos(b*t))/t, t, s)
laplace(sin(a*t) - a*t*cos(a*t), t, s)
laplace((cosh(a*t) - cos(a*t))/(2*a^2), t, s)
laplace(exp(-a*t) * sin(b*t) / b^2, t, s)
-- we handle some very limited form of special functions
laplace(exp(a*t+b)*Ei(c*t), t, s)
laplace(a*Ci(b*t) + c*Si(d*t), t, s)
-- we keep unknown transforms as formal transform in the answer
laplace(sin(a*t) - a*t*cos(a*t) + exp(t^2), t, s)

-- Input for page SeriesCoefficientPage
)clear all
)set streams calculate 7

x := series(x)
y := exp(x) * sin(x)
coefficient(y,6)
coefficient(y,15)
y

-- Input for page SymbolicIntegrationPage
)clear all

g := log(1 + sqrt(a * x + b)) / x
integrate(g, x)
integrate(1/(x^2 - 2),x)
integrate(1/(x^2 + 2),x)
h := x^2 / (x^4 - a^2)
integrate(h, x)
complexIntegrate(h, x)
expandLog %
rootSimp %

-- Input for page DerivativePage
)clear all

f := exp exp x
differentiate(f, x)
differentiate(f, x, 4)
g := sin(x^2 + y)
differentiate(g, y)
differentiate(g, [y, y, x, x])

-- Input for page SeriesFormulaPage
)clear all

taylor(n +-> 1/factorial(n),x = 0)
taylor(n +-> (-1)^(n-1)/n,x = 1,1..)
taylor(n +-> (-1)^(n-1)/n,x = 1,1..7)
laurent(n +-> (-1)^(n-1)/(n + 2),x = 1,-1..)
puiseux(i +-> (-1)^((i-1)/2)/factorial(i),x = 0,1..,2)
puiseux(j +-> j^2,x = 8,-4/3..,1/2)
series(n +-> 1/factorial(n),x = 0)
series(n +-> (-1)^(n - 1)/(n + 2),x = 1,-1..)
series(i +-> (-1)^((i - 1)/2)/factorial(i),x = 0,1..,2)

-- Input for page SeriesCreationPage
)clear all

x := series x
1/(1 - x - x^2)
sin(x)
sin(1 + x)
sin(a * x)
series(1/log(y),y = 1)
f : UTS(FLOAT,z,0) := exp(z)
series(1/factorial(n),n,w = 0)

-- Input for page SeriesFunctionPage
)clear all

x := series x
rat := x^2 / (1 - 6*x + x^2)
sin(rat)
y : UTS(FRAC INT,y,0) := y
exp(y)
tan(y^2)
cos(y + y^5)
log(1 + sin(y))
z : UTS(EXPR INT,z,0) := z
exp(2 + tan(z))
w := taylor w
exp(2 + tan(w))

-- Input for page SeriesBernoulliPage
)clear all

reduce(+,[m^4 for m in 1..10])
sum4 := sum(m^4, m = 1..k)
eval(sum4, k = 10)
f := t*exp(x*t) / (exp(t) - 1)
)set streams calculate 5
ff := taylor(f,t = 0)
factorial(6) * coefficient(ff,6)
g := eval(f, x = x + 1) - f
normalize(g)
taylor(g,t = 0)
B5 := factorial(5) * coefficient(ff,5)
1/5 * (eval(B5, x = k + 1) - eval(B5, x = 1))
sum4
