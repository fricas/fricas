
% Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are
% met:
%
%     - Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     - Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in
%       the documentation and/or other materials provided with the
%       distribution.
%
%     - Neither the name of The Numerical ALgorithms Group Ltd. nor the
%       names of its contributors may be used to endorse or promote products
%       derived from this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
% IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
% TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
% PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
% OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
% EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
% PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES-- LOSS OF USE, DATA, OR
% PROFITS-- OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
% LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
% NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
% SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Initialisations
\xtc{
}{
\spadcommand{a:Symbol :='a \bound{a}}
}
\xtc{
}{
\spadcommand{b:Symbol :='b \bound{b}}
}
\xtc{
}{
\spadcommand{c:Symbol :='c \bound{c}}
}
\xtc{
}{
\spadcommand{lword:= LyndonWord(Symbol) \bound{lword}}
}
\xtc{
}{
\spadcommand{magma := Magma(Symbol) \bound{magma}}
}
\xtc{
}{
\spadcommand{word   := FreeMonoid(Symbol) \bound{word}}
}
\xtc{
All Lyndon words of with a, b, c to order 3
}{
\spadcommand{LyndonWordsList1([a,b,c],3)$lword \free{lword} \free{a} \free{b} \free{c} }
}
\xtc{
All Lyndon words of with a, b, c to order 3 in flat list
}{
\spadcommand{LyndonWordsList([a,b,c],3)$lword \free{a} \free{b} \free{c} \free{lword}}
}
\xtc{
All Lyndon words of with a, b to order 5
}{
\spadcommand{lw := LyndonWordsList([a,b],5)$lword \free{a} \free{b} \free{lword} \bound{lw}}
}
\xtc{
}{
\spadcommand{w1 : word := lw.4 :: word \free{word} \free{lw} \bound{w1}}
}
\xtc{
}{
\spadcommand{w2 : word := lw.5 :: word \free{word} \free{lw} \bound{w2}}
}

Let's try factoring
\xtc{
}{
\spadcommand{factor(a::word)$lword \free{a word lword}}
}
\xtc{
}{
\spadcommand{factor(w1*w2)$lword \free{ w1 w2 lword}}
}
\xtc{
}{
\spadcommand{factor(w2*w2)$lword \free{w2 lword}}
}
\xtc{
}{
\spadcommand{factor(w2*w1)$lword \free{w1 w2 lword}}
}

Checks and coercions
\xtc{
}{
\spadcommand{lyndon?(w1)$lword \free{w1 lword}}
}
\xtc{
}{
\spadcommand{lyndon?(w1*w2)$lword \free{w1 w2 lword}}
}
\xtc{
}{
\spadcommand{lyndon?(w2*w1)$lword \free{w1 w2 lword}}
}
\xtc{
}{
\spadcommand{lyndonIfCan(w1)$lword \free{w1 lword}}
}
\xtc{
}{
\spadcommand{lyndonIfCan(w2*w1)$lword \free{w1 w2 lword}}
}
\xtc{
}{
\spadcommand{lyndon(w1)$lword \free{w1 lword}}
}
\xtc{
}{
\spadcommand{lyndon(w1*w2)$lword \free{w1 w2 lword}}
}
