)abbrev package REAL0Q RealZeroPackageQ
++ Author: Andy Neff, Barry Trager
++ Basic Functions:
++ Related Constructors: UnivariatePolynomial, RealZeroPackageQ
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++   This package provides functions for finding the real zeros
++ of univariate polynomials over the rational numbers to arbitrary user-specified
++ precision. The results are returned as a list of
++ isolating intervals, expressed as records with "left" and "right" rational number components.

RealZeroPackageQ(Pol) : T == C where
   RN  ==> Fraction Integer
   I   ==> Integer
   SUP ==> SparseUnivariatePolynomial
   Pol : UnivariatePolynomialCategory RN
   Interval ==> Record(left : RN, right : RN)
   isoList ==> List(Interval)
   ApproxInfo ==> Record(approx : RN, exFlag : Boolean)
   T == with
    -- next two functions find isolating intervals
      realZeros : (Pol) -> isoList
        ++ realZeros(pol) returns a list of isolating intervals for
        ++ all the real zeros of the univariate polynomial pol.
      realZeros : (Pol, Interval) -> isoList
        ++ realZeros(pol, range) returns a list of isolating intervals
        ++ for all the real zeros of the univariate polynomial pol which
        ++ lie in the interval expressed by the record range.
    -- next two functions return intervals smaller then tolerence
      realZeros : (Pol, RN) -> isoList
        ++ realZeros(pol, eps) returns a list of intervals of length less
        ++ than the rational number eps for all the real roots of the
        ++ polynomial pol.
      realZeros : (Pol, Interval, RN) -> isoList
        ++ realZeros(pol, int, eps) returns a list of intervals of length
        ++ less than the rational number eps for all the real roots of the
        ++ polynomial pol which lie in the interval expressed by the
        ++ record int.
      refine : (Pol, Interval, RN) -> Interval
        ++ refine(pol, int, eps) refines the interval int containing
        ++ exactly one root of the univariate polynomial pol to size less
        ++ than the rational number eps.
      refine : (Pol, Interval, Interval) -> Union(Interval,"failed")
        ++ refine(pol, int, range) takes a univariate polynomial pol and
        ++ and isolating interval int which must contain exactly one real
        ++ root of pol, and returns an isolating interval which
        ++ is contained within range, or "failed" if no such isolating interval exists.
   C == add
      import from RealZeroPackage SparseUnivariatePolynomial Integer

      convert2PolInt : Pol -> SparseUnivariatePolynomial Integer

      convert2PolInt(f : Pol) ==
         pden : I := lcm([denom c for c in coefficients f])
         map(numer, pden * f)$UnivariatePolynomialCategoryFunctions2(RN, Pol, I, SUP I)

      realZeros(f : Pol) == realZeros(convert2PolInt f)
      realZeros(f : Pol, rn : RN) == realZeros(convert2PolInt f, rn)
      realZeros(f : Pol, bounds : Interval) ==
               realZeros(convert2PolInt f, bounds)
      realZeros(f : Pol, bounds : Interval, rn : RN) ==
               realZeros(convert2PolInt f, bounds, rn)
      refine(f : Pol, int : Interval, eps : RN) ==
               refine(convert2PolInt f, int, eps)
      refine(f : Pol, int : Interval, bounds : Interval) ==
               refine(convert2PolInt f, int, bounds)

--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
