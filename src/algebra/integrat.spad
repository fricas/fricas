)abbrev package FSCINT FunctionSpaceComplexIntegration
++ Top-level complex function integration
++ Author: Manuel Bronstein
++ Date Created: 4 February 1988
++ Date Last Updated: 11 June 1993
++ Description:
++   \spadtype{FunctionSpaceComplexIntegration} provides functions for the
++   indefinite integration of complex-valued functions.
++ Keywords: function, integration.
FunctionSpaceComplexIntegration(R, F) : Exports == Implementation where
  R : Join(EuclideanDomain, Comparable, CharacteristicZero,
           RetractableTo Integer, LinearlyExplicitRingOver Integer)
  F : Join(TranscendentalFunctionCategory,
           AlgebraicallyClosedFunctionSpace R)

  SE  ==> Symbol
  G   ==> Complex R
  FG  ==> Expression G
  IR  ==> IntegrationResult F

  Exports ==> with
    internalIntegrate : (F, SE) -> IR
        ++ internalIntegrate(f, x) returns the integral of \spad{f(x)dx}
        ++ where x is viewed as a complex variable.
    internalIntegrate0 : (F, SE) -> IR
        ++ internalIntegrate0 should be a local function, but is conditional.
    complexIntegrate  : (F, SE) -> F
        ++ complexIntegrate(f, x) returns the integral of \spad{f(x)dx}
        ++ where x is viewed as a complex variable.

  Implementation ==> add
    import from IntegrationTools(R, F)
    import from ElementaryIntegration(R, F)
    import from ElementaryIntegration(G, FG)
    import from AlgebraicManipulations(R, F)
    import from AlgebraicManipulations(G, FG)
    import from TrigonometricManipulations(R, F)
    import from IntegrationResultToFunction(R, F)
    import from IntegrationResultFunctions2(FG, F)
    import from ElementaryFunctionStructurePackage(R, F)
    import from ElementaryFunctionStructurePackage(G, FG)
    import from InnerTrigonometricManipulations(R, F, FG)

    RTRIG := 'rtrig

    K2KG : Kernel F -> Kernel FG

    K2KG k                 == retract(tan F2FG first argument k)@Kernel(FG)

    complexIntegrate(f, x) ==
      removeConstantTerm(complexExpand internalIntegrate(f, x), x)

    if R has Join(ConvertibleTo Pattern Integer, PatternMatchable Integer)
      and F has Join(LiouvillianFunctionCategory, RetractableTo SE) then
        import from PatternMatchIntegration(R, F)
        internalIntegrate0(f, x) ==
          intPatternMatch(f, x, lfintegrate, pmComplexintegrate)

    else internalIntegrate0(f, x) == lfintegrate(f, x)

    internalIntegrate(f, x) ==
      f := distribute(f, x::F)
      any?(x1+->has?(operator x1, RTRIG),
       [k for k in tower(g := realElementary(f, x))
        | member?(x, variables(k::F))]$List(Kernel F))$List(Kernel F) =>
          h := trigs2explogs(F2FG g, [K2KG k for k in tower f
                         | is?(k, 'tan) or is?(k, 'cot)])
          real?(g := FG2F h) =>
            internalIntegrate0(rootSimp(rischNormalize(g, x).func), x)
          real?(g := FG2F(h := rootSimp(rischNormalize(h, x).func))) =>
                                                       internalIntegrate0(g, x)
          map(FG2F, lfintegrate(h, x))
      internalIntegrate0(rootSimp(rischNormalize(g, x).func), x)

)abbrev package FSINT FunctionSpaceIntegration
++ Top-level real function integration
++ Author: Manuel Bronstein
++ Date Created: 4 February 1988
++ Date Last Updated: 11 June 1993
++ Keywords: function, integration.
++ Description:
++   \spadtype{FunctionSpaceIntegration} provides functions for the
++   indefinite integration of real-valued functions.
++ Examples: )r INTEF INPUT
FunctionSpaceIntegration(R, F) : Exports == Implementation where
  R : Join(EuclideanDomain, Comparable, CharacteristicZero,
           RetractableTo Integer, LinearlyExplicitRingOver Integer)
  F : Join(TranscendentalFunctionCategory, PrimitiveFunctionCategory,
           AlgebraicallyClosedFunctionSpace R)

  B   ==> Boolean
  G   ==> Complex R
  K   ==> Kernel F
  P   ==> SparseMultivariatePolynomial(R, K)
  SE  ==> Symbol
  IR  ==> IntegrationResult F
  FG  ==> Expression G
  TANTEMP ==> '%temptan

  Exports ==> with
    integrate : (F, SE) -> Union(F, List F)
        ++ integrate(f, x) returns the integral of \spad{f(x)dx}
        ++ where x is viewed as a real variable.

  Implementation ==> add
    import from IntegrationTools(R, F)
    import from ElementaryIntegration(R, F)
    import from ElementaryIntegration(G, FG)
    import from AlgebraicManipulations(R, F)
    import from TrigonometricManipulations(R, F)
    import from IntegrationResultToFunction(R, F)
    import from TranscendentalManipulations(R, F)
    import from IntegrationResultFunctions2(FG, F)
    import from FunctionSpaceComplexIntegration(R, F)
    import from ElementaryFunctionStructurePackage(R, F)
    import from InnerTrigonometricManipulations(R, F, FG)
    import from PolynomialCategoryQuotientFunctions(IndexedExponents K,
                      K, R, SparseMultivariatePolynomial(R, K), F)

    RTRIG := 'rtrig
    HTRIG := 'htrig
    ELEM := 'elem
    ALGOP := '%alg

    K2KG      : K -> Kernel FG
    postSubst : (F, List K, List F, List K, List K, SE) -> F
    rinteg    : (IR, F, SE, B) -> Union(F, List F)
    mkPrimh   : (F, SE, B) -> F
    trans?    : F -> B
    goComplex? : (B, List K, List K) -> B
    halfangle : F -> F
    Khalf     : K -> F
    tan2temp  : K -> K

    optemp : BasicOperator := operator(TANTEMP, 1)

    K2KG k     == retract(tan F2FG first argument k)@Kernel(FG)
    tan2temp k == kernel(optemp, argument k, height k)$K

    trans? f ==
      any?(x1+->is?(x1, 'log) or is?(x1, 'exp) or is?(x1, 'atan),
           operators f)$List(BasicOperator)

    mkPrimh(f, x, h) ==
      g := mkPrim(f, x)
      h and trans? g => htrigs g
      g

    rinteg(i, f, x, h) ==
      not elem? i => integral(f, x)$F
      empty? rest(l := [mkPrimh(f, x, h) for f in expand i]) => first l
      l

-- replace tan(a/2)^2 by (1-cos a)/(1+cos a) if tan(a/2) is in ltan
    halfangle a ==
      a := 2 * a
      (1 - cos a) / (1 + cos a)

    Khalf k ==
      a := 2 * first argument k
      sin(a) / (1 + cos a)

    find_int(i : K, t : List K) : K ==
        ail := argument(i)
        k0 := #ail
        ii := i::F
        for k in t repeat
           if is?(operator(k), '%iint) then
               akl := argument(k)
               #akl ~= k0 => "iterate"
               normalize(ii - k::F) = 0 => return k
        i

    try_real(f : F) : F ==
        pu : Union(F, "failed") := trappedSpadEval(real(f))$Lisp
        pu case F => pu::F
        f

-- ltan = list of tangents in the integrand after real normalization
    postSubst(f, otf, lv, lk, ltan, x) ==
      for v in lv for k in lk repeat
        ((u := retractIfCan(v)@Union(K, "failed")) case K) =>
           uk := u::K
           if has?(operator(uk), ALGOP) then
             f := univariate(f, uk, minPoly uk) (uk::F)
           if is?(operator(uk), '%iint) and
              not(member?(uk, (tf := tower f))) then
               uk := find_int(uk, tf)
           f := eval(f, [uk], [k::F])
        if is?(k, 'nthRoot) then
           vkl := [kk for kk in kernels(v) | is?(kk, 'nthRoot)]
           if #vkl = 1 then
               vk := vkl(1)
               member?(vk, otf) => "skip"
               vkf := vk::F
               vc := v/vkf
               member?(vk, kernels(vc)) => "skip"
               vkv := (k::F)/vc
               f := univariate(f, vk, minPoly vk) (vkf)
               f := eval(f, [vk], [vkv])
      if not(empty? ltan) then
        ltemp := [tan2temp k for k in ltan]
        f := eval(f, ltan, [k::F for k in ltemp])
        f := eval(f, TANTEMP, 2, halfangle)
        f := eval(f, ltemp, [Khalf k for k in ltemp])
      f := try_real(f)
      f := removeSinSq f
      removeConstantTerm(f, x)

    RTG_Rec ==> Record(ker : List Kernel(FG), val : List(FG))
    RALG_Rec ==> Record(ker : List Kernel(F), val : List(F))

    inv_lst(lt : List Kernel(FG), le : List(FG)) : RTG_Rec ==
        resk : List Kernel(FG) := []
        rese :  List(FG) := []
        im := complex(0, 1)$G
        for k in lt for e in le repeat
            ik : Kernel(FG)
            ie : FG
            not(is?(k, 'atan) or is?(k, 'tan)) => "iterate"
            if is?(k, 'atan) then
                ik := retract(-2*im*e)@Kernel(FG)
                ie := -2*im*(k::FG)
            if is?(k, 'tan) then
                e1 := im*e
                k1 := im*(k::FG)
                ik := retract(-(e1 + 1)/(e1 - 1))@Kernel(FG)
                ie := -(k1 + 1)/(k1 - 1)
            resk := cons(ik, resk)
            rese := cons(ie, rese)
        [reverse(resk), reverse(rese)]

    inv_alg_lst(lt : List Kernel(F)) : RALG_Rec ==
        resk : List Kernel(F) := []
        rese :  List(F) := []
        im := sqrt(-1)$F
        for k in lt repeat
            not(is?(k, 'nthRoot)) => "iterate"
            e1 := F2FG(k::F)
            ckl := kernels(e1)
            #ckl ~= 1 => "iterate"
            ck := ckl(1)
            ckf := ck::FG
            e1 = ckf => "iterate"
            e2 := FG2F(ckf)
            ru1 := retractIfCan(e2)@Union(Kernel(F), "failed")
            ru1 case "failed" => "iterate"
            resk := cons(ru1::Kernel(F), resk)
            rese := cons(k::F/FG2F(e1/ckf), rese)
        [reverse! resk, reverse! rese]

    to_real(fg : FG, rtg : RTG_Rec, ralg : RALG_Rec) : F ==
        f := FG2F subst(fg, rtg.ker, rtg.val)
        subst(f, ralg.ker, ralg.val)

    -- go complex for trigs and inverse trigs
    -- ltan is the list of all the tangents in l
    goComplex?(rt, l, ltan) == not(empty? ltan) or rt

    integrate(f, x) ==
      -- FIXME: we need better way to check if base ring is
      -- real
      R has imaginary : () -> % or R is AlgebraicNumber =>
          complexIntegrate(f, x)
      not real? f => complexIntegrate(f, x)
      f   := distribute(f, x::F)
      tf := tower f
      ltf := select(x1+->is?(operator x1, 'tan), tf)
      ht  := any?(x1+->has?(operator x1, HTRIG), tf)
      etf := [realLiouvillian(k::F, x) for k in tf]
      ekers : List K := []
      evals : List F := []
      for k in tf for v in etf repeat
          if ((vu := retractIfCan(v)@Union(K, "failed")) case K) then
              vk := vu::K
              kn := name(operator(vk))
              if kn = '%iint or kn = 'atan then
                  ekers := cons(k, ekers)
                  evals := cons(v, evals)
      f1 := eval(f, tf, etf)
      tf1 := tower(f1)
      rec := rischNormalize(f1, x)
      tf2 := tower(rec.func)
      r_lst : List(K) := []
      rv_lst : List(F) := []
      nr_lst : List(K) := []
      ir_lst : List(F) := []
      for k in tf2 repeat
          not(is?(k, 'nthRoot)) => "iterate"
          akl := argument(k)
          ak1 := eval(first(akl), r_lst, rv_lst)
          ak2 := (retract(akl(2))@Integer)::NonNegativeInteger
          pr := froot(ak1, ak2)$PolynomialRoots(IndexedExponents K, K, R, P, F)
          nak := pr.radicand
          rnumu := retractIfCan(numer(nak))@Union(R, "failed")
          pr.exponent = ak2 and pr.coef = 1 and
              rnumu case "failed" => "iterate"
          r_lst := cons(k, r_lst)
          nk : F
          ec := eval(pr.coef, nr_lst, ir_lst)
          if rnumu case R then
              nk := kernel(operator(k), [1/nak, (pr.exponent)::F])
              rv_lst := cons(pr.coef/nk, rv_lst)
              ir_lst := cons(ec/k::F, ir_lst)
          else
              rv_lst := cons(pr.coef*nk, rv_lst)
              ir_lst := cons(k::F/eval(pr.coef, nr_lst, ir_lst), ir_lst)
          nr_lst := cons(retract(nk)@K, nr_lst)
      g := subst(rec.func, r_lst, rv_lst)
      tg0 := tower g
      tg  := [k for k in tg0 | member?(x, variables(k::F))]$List(K)
      ltg := select(x1+->is?(operator x1, 'tan), tg)
      rtg := any?(x1+->has?(operator x1, RTRIG), tg)
      el  := any?(x1+->has?(operator x1, ELEM), tg)
      i : IR
      if (goComplex?(rtg, tg, ltg)) then
          ralg := inv_alg_lst(tg0)
          gg0 := F2FG g
          tgg0 := tower(gg0)
          tgg1 := [trigs2explogs(k::FG, []) for k in tgg0]
          rtg1 := inv_lst(tgg0, tgg1)
          gg := eval(gg0, tgg0, tgg1)
          -- FIXME: we should really rerun algebraic normalization
          -- but currently we do nothing
          -- rootSimp caused regression on arc trigonometric functions
          -- gg := rootSimp(gg)$AlgebraicManipulations(G, FG)
          i := map((fg : FG) : F +-> to_real(fg, rtg1, ralg),
                 lfintegrate(gg, x))
          i := rationalize_ir(i, retract(sqrt(-1))@Kernel(F)
                             )$GenusZeroIntegration(R, F, F)
      else i := lfintegrate(g, x)
      i := map((ii :F) : F +-> eval(ii, nr_lst, ir_lst),
               i)$IntegrationResultFunctions2(F, F)
      ltg := setDifference(ltg, ltf)   -- tan's added by normalization
      okers := concat(rec.kers, ekers)
      ovals := concat(rec.vals, evals)
      (u := rinteg(i, f, x, el and ht)) case F =>
          postSubst(u::F, tf1, ovals, okers, ltg, x)
      [postSubst(h, tf1, ovals, okers, ltg, x) for h in u::List(F)]

--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-- SPAD files for the integration world should be compiled in the
-- following order:
--
--   intaux  rderf  intrf  curve  curvepkg  divisor  pfo
--   intalg  intaf  EFSTRUC  rdeef  intef  irexpand  integrat
