)abbrev package OMSERVER OpenMathServerPackage
++ Author: Vilya Harvey
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description: \spadtype{OpenMathServerPackage} provides the necessary
++ operations to run AXIOM as an OpenMath server, reading/writing objects
++ to/from a port.  Please note the facilities available here are very basic.
++ The idea is that a user calls e.g. \spad{Omserve(4000, 60)} and then
++ another process sends OpenMath objects to port 4000 and reads the result.

OpenMathServerPackage() : with
  OMreceive : OpenMathConnection -> Any
  ++ OMreceive(c) reads an OpenMath object from connection \spad{c} and
  ++ returns the appropriate AXIOM object.
  OMsend    : (OpenMathConnection, Any) -> Void
  ++ OMsend(c, u) attempts to output \spad{u} on \aciom{c} in OpenMath.
  OMserve   : (SingleInteger, SingleInteger) -> Void
  ++ OMserve(portnum, timeout) puts AXIOM into server mode on port number
  ++ \spad{portnum}.  The parameter \spad{timeout} specifies the timeout
  ++ period for the connection.
 == add
  import from OpenMathDevice
  import from OpenMathConnection
  import from OpenMathPackage
  import from OpenMath



  OMreceive(conn : OpenMathConnection) : Any ==
    dev : OpenMathDevice := OMconnInDevice(conn)
    OMsetEncoding(dev, OMencodingUnknown)
    OMread(dev)

  OMsend(conn : OpenMathConnection, value : Any) : Void ==
    dev : OpenMathDevice := OMconnOutDevice(conn)
    OMsetEncoding(dev, OMencodingXML)
    --retractable?(value)$AnyFunctions1(Expression Integer) =>
    --  OMwrite(dev, retract(value)$AnyFunctions1(Expression Integer), true)
    retractable?(value)$AnyFunctions1(Integer) =>
      OMwrite(dev, retract(value)$AnyFunctions1(Integer), true)
    retractable?(value)$AnyFunctions1(Float) =>
      OMwrite(dev, retract(value)$AnyFunctions1(Float), true)
    retractable?(value)$AnyFunctions1(SingleInteger) =>
      OMwrite(dev, retract(value)$AnyFunctions1(SingleInteger), true)
    retractable?(value)$AnyFunctions1(DoubleFloat) =>
      OMwrite(dev, retract(value)$AnyFunctions1(DoubleFloat), true)
    retractable?(value)$AnyFunctions1(String) =>
      OMwrite(dev, retract(value)$AnyFunctions1(String), true)

  OMserve(portNum : SingleInteger, timeout : SingleInteger) : Void ==
    conn : OpenMathConnection := OMmakeConn(timeout)
    OMbindTCP(conn, portNum)
    val : Any
    while true repeat
      val := OMreceive(conn)
      OMsend(conn, val)

--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
