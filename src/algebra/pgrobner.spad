)abbrev package PGROEB PolyGroebner
++ Author: P. Gianni
++ Date Created: Summer 1988
++ Basic Functions:
++ Related Constructors: GroebnerPackage
++ Also See:
++ AMS Classifications:
++ Keywords: groebner basis, polynomial ideals
++ References:
++ Description:
++ Groebner functions for P F
++   This package is an interface package to the groebner basis
++ package which allows you to compute groebner bases for polynomials
++ in either lexicographic ordering or total degree ordering refined
++ by reverse lex. The input is the ordinary polynomial type which
++ is internally converted to a type with the required ordering.
++ The resulting grobner basis is converted back to ordinary polynomials.
++ The ordering among the variables is controlled by an explicit list
++ of variables which is passed as a second argument. The coefficient
++ domain is allowed to be any gcd domain, but the groebner basis is
++ computed as if the polynomials were over a field.

PolyGroebner(F) : C == T

 where
  F      :   GcdDomain
  NNI    ==>  NonNegativeInteger
  P      ==>  Polynomial F
  L      ==>  List
  E      ==>  Symbol

  C == with
     lexGroebner   :    (L P, L E)  ->  L P
       ++ lexGroebner(lp, lv) computes Groebner basis
       ++ for the list of polynomials lp in lexicographic order.
       ++ The variables are ordered by their position in the list lv.

     totalGroebner :    (L P, L E) ->  L P
       ++ totalGroebner(lp, lv) computes Groebner basis
       ++ for the list of polynomials lp with the terms
       ++ ordered first by total degree and then
       ++ refined by reverse lexicographic ordering.
       ++ The variables are ordered by their position in the list lv.

  T == add
     lexGroebner(lp : L P, lv : L E) : L P ==
       PP :=  PolToPol(lv, F)
       DPoly := DistributedMultivariatePolynomial(lv, F)
       DP := DirectProduct(#lv, NNI)
       OV := OrderedVariableList lv
       b : L DPoly := [pToDmp(pol)$PP for pol in lp]
       gb : L DPoly := groebner(b)$GroebnerPackage(F, DP, OV, DPoly)
       [dmpToP(pp)$PP for pp in gb]

     totalGroebner(lp : L P, lv : L E) : L P ==
       PP :=  PolToPol(lv, F)
       HDPoly := HomogeneousDistributedMultivariatePolynomial(lv, F)
       HDP := HomogeneousDirectProduct(#lv, NNI)
       OV := OrderedVariableList lv
       b : L HDPoly := [pToHdmp(pol)$PP for pol in lp]
       gb := groebner(b)$GroebnerPackage(F, HDP, OV, HDPoly)
       [hdmpToP(pp)$PP for pp in gb]

--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
