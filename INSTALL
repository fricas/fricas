PREREQUISITES

In order to build FriCAS, you'll at least need:

    - A C compiler and standard build tools, like make.

    - An implementation of Common Lisp. (We recommend the latest SBCL.)
    
    - The X libraries and development headers, including Xpm.

While it is possible to run FriCAS without X, we strongly recommend
it.


QUICK BUILD AND INSTALLATION

We recommend building FriCAS outside of the development
directory. (Currently, FriCAS cannot be built inside of the directory
on case-insensitive filesystems, such as the default on macOS.)

Below, we assume we are in the FriCAS directory called 'fricas', which
will be the default directory name if you cloned the git
repository. First, we make a build directory:

    $ cd ..
    $ mkdir _FRICAS_BUILD         # can be any name
    $ cd _FRICAS_BUILD
   
Next, we configure the build. Here, if the '--prefix' option is *not*
supplied, it will configure installation for '/usr/local/bin'. The
'--with-lisp' option should be supplied with the command to run your
Common Lisp implementation. (The Lisp command might include
Lisp-specific configuration options, such as heap limits, etc.)

    $ ../fricas/configure --prefix=<PATH_TO_INSTALL> --with-lisp=<LISP>

Make sure to look at the output to see if anything was
missed. Additional options can be found by passing the '-h' option to
'configure'.

Lastly, build FriCAS and install it.

    $ make
    $ make install                # assumes write access to --prefix

Voila! You should now be able to run

    $ fricas -nosman              # start FriCAS at the command line

To gain confidence that your build works, you can run the unit tests
by executing the following:

    $ make check

Beware, this command may take a while to finish.


INSTALLATION LOCATION

FriCAS installs itself to wherever '--prefix' is specified. If
'--prefix' is specified to $FOO, when FriCAS is installed in

    $FOO/lib/fricas/              # FriCAS system files
    $FOO/bin/                     # FriCAS binaries





                        * * * APPENDICES * * *

The following appendices are for informational and historical
purposes. They may help you debug certain issues you might encounter
when running the above commands.


APPENDIX: OPTIMIZING THE ALGEBRA CODE

When writing/compiling programs there is always tradeoff between speed
and safety. Program may include many checks to detect errors early
(and allow recovery), such programs are safe but checks take time so
the program is slower. Or program may just blindly go forward hoping
that everything goes well. Typically the second program will be
faster, but in case of problems it may crash without any hint why and
take user data with it.

Safety checks may be written by programmer, but another possibility is
to have compiler which automatically inserts various checks. FriCAS is
compiled by Lisp compiler and Lisp compilers may insert safety checks.
How many checks are inserted may be controlled by the user. By
default FriCAS tries to strike good balance between speed and safety.
However, some FriCAS users want different tradeoff. The
'--enable-algebra-optimization=S' option to configure allows changing
this setting: S is a Lisp expression specifying speed/safety tradeoff
used by Lisp compiler.  For example:

    --enable-algebra-optimization="((speed 3) (safety 0))"

chooses fastest (but unsafe) variant, while

    --enable-algebra-optimization="((speed 2) (safety 3))"

should be very safe (but possibly slow).

This setting affects only the code which implements much of the actual
mathematics, the so-called "algebra code".  The rest of FriCAS always
uses default setting.


APPENDIX: GRAPHICS EXAMPLES

To run graphics examples, after you've run 'make', run:

    make viewports
    
If successful, several graphics examples will be displayed. It is also
possible to use xvfb-run program, replacing 'make viewports' above by:

    xvfb-run --server-args="-screen 0 1024x768x24" --auto-servernum -n 0 make viewports


APPENDIX: LISP COMPILER SUPPORT

Several Lisp implementations have been tried at various points of
FriCAS's development, however, not all implementations are rigorously
tested or necessarily supported. FriCAS attempts whenever possible to
write Lisp code to be ANSI conforming, so in principle any Lisp
compiler should work. However, FriCAS does contain some
implementation-specific code here and there.

We have tried the following implementations and versions:

    * sbcl, 1.0.7 or later (our recommendation!)

    * clisp, 2.41 or later

    * Clozure CL (former openmcl), starting from openmcl 1.1
      prerelease 070512

    * ECL, 0.9l or later (we recommend latest version)

    * cmucl

Note that different Lisp implementations will have wildly different
performance characteristics.


APPENDIX: X LIBRARIES ON DEBIAN

On Debian (or Ubuntu) you probably need to use the various GUI and
display routines:

    libx11-dev, libxt-dev, libice-dev, libsm-dev, libxau-dev,
    libxdmcp-dev, libxpm-dev.


APPENDIX: GMP

With SBCL and Clozure CL on x86_64 processors, GMP can be used to
speed up some arithmetic routines. Use '--enable-gmp'.

When you have GMP installed in a non-standard location (this usually
means anything other than /usr or /usr/local) then you can specify the
location with the 'configure' argument '--with-gmp=<PATH>'. This
supposes that the include file is in '<PATH>/include' and libgmp is in
'<PATH>/lib'. If you have a different setup, then you can specify
'--with-gmp-include=<INCLUDEPATH> --with-gmp-lib=<LIBPATH>' (specify
the directories where the include files and libgmp are found,
respectively).

These options also implicitly set --enable-gmp.  However, if
'--enable-gmp=no' is given, then

    --with-gmp
    --with-gmp-include
    --with-gmp-lib
    
are ignored.


APPENDIX: LATEX

Extra libraries needed to have LaTeXed output (ASCII output works
fine without) in efricas. On Debian (or Ubuntu) you probably need:

    dvipng, auctex


APPENDIX: GCL

Extra libraries needed by gcl. If you use Debian gcl you probably
need libreadline5-dev, libncurses5-dev, libgmp3-dev, libxmu-dev and
libxaw7-dev


APPENDIX: ECL

For ECL you probably need libffi-dev.


APPENDIX: KNOWN ENVIRONMENT ISSUES

The following is a non-exhaustive list of past issues we've
encountered with various build configurations. These are only of
historical significance in the event something doesn't work.

- when using case insensitive filesystem (typically on Mac OSX and
  Windows) svn version can be only build in separate directory
  (in-tree build will fail).  This does not affect release tarball.

- by default sbcl 1.0.54 and newer limits memory use to 1GB, which is
  too small for heavy use.  To work around this one can pass
  '--dynamic-space-size' argument during _sbcl_ build to increase
  default limit.  We recommend limit slightly smaller than amount of
  available RAM (in this way FriCAS will be able to use almost all
  RAM, but limit should prevent thrashing).

- on some systems (notably macOS) when using sbcl default limit of
  open files may be too low.  To workaround increase limit
  (experiments suggest that 512 open files is enough).  This should be
  not needed in FriCAS 1.1.7.

- sbcl from 1.3.1 to 1.3.4 runs out of memory when compiling FriCAS.
  This is fixed in newer versions of sbcl.

- using sbcl from 1.0.47 to 1.0.49 compilation is very slow (few hours
  on fast machine).  This is fixed in newer versions of sbcl.

- sbcl-1.0.29 has bug in 'directory' function which causes build
  failure.  This problem is fixed in 1.0.29.54.rc1.

- 1.0.29.54.rc1 has broken complex 'tanh' function -- you will get
  wrong results when applying 'tanh' to Complex DoubleFloat.

- in sbcl 1.0.35 and up Control-C handling did not work.  This should
  be fixed in current FriCAS.

- Some Linux versions, notably SuSe, by default seem to have very
  small limit on virtual memory.  This causes build failure when using
  sbcl or Clozure CL.  Also if limit on virtual memory is too small
  sbcl-based or Clozure CL-based FriCAS binary will silently fail at
  startup.  The simplest workaround is to increase limit, in the shell
  typing

    ulimit -v unlimited

  Alternatively for sbcl one can use '--dynamic-space-size' argument
  to decrease use of virtual memory.

- building FriCAS fails when using newest gcl

- older gcl had serious problems on Macs and Windows.

- released gcl-2.6.9 has a bug which causes failure of FriCAS build.
  This problem is fixed in 2.6.10 and later but but there is a
  different one.  Namely, FriCAS builds but apparently on some
  machines is miscompiled using released 2.6.10 or 2.6.11 or 2.6.12.

- On Gentoo system installed gcl probably will not work, one need to
  build own one.

- Older version of gcl are incompatible with Fedora "exec-shield" and
  strong address space randomization (setting randomize_va_space to
  2).  Newest CVS version of 2.6.8 branch of gcl fixes this problem.

- gcl needs bfd library.  Many Linux systems include version of bfd
  library which is incompatible with gcl.  In the past we advised to
  use in such case the following configure line:

    ./configure --disable-xgcl --disable-dynsysbfd --disable-statsysbfd --enable-locbfd

- Boehm garbage collector included in old ECL (version 6.8) is
  incompatible with Fedora strong address space randomization (setting
  randomize_va_space to 2).  Using newer version of Boehm garbage
  collector (7.0 or 7.1) or newer ECL should solve this problem.

- Striping FriCAS binaries is likely to break them.  In particular
  Clisp based FriCAS may crash with message:

    module 'syscalls' requires package OS.

  while sbcl will show only loader prompt.

- On Mac OSX Tiger some users reported problems with pseudoterminals,
  build stopped with message:

    fork_Axiom: Failed to reopen server: No such file or directory

  This problem is believed to be fixed in FriCAS-1.0.5 (and later).

- ECL 9.6.2 (and probably also 9.6.1 and 9.6.0) has a bug with
  handling string constants which causes build based on this version
  to fail.  This bugs is fixed in newer versions.  ECL 9.7.1 generates
  wrong C code, so that build fails.  This is fixed in newer versions.

- Unicode-enabled ECL before 9.8.4 is unable to build FriCAS.

- ECL up to version 0.9l may segfault at exit.  This is usually
  harmless, but may cause build to hang (for example when generating
  ug13.pht).

- In general, any error when generating documentation will cause build
  to hang.

- Clozure CL 1.10 apparently miscompiles some operations on U32Matrix.
  Version 1.11 works OK.

- Clozure CL 1.7 and 1.6 apparently miscompiles FriCAS.  Versions 1.8
  and newer and 1.5 and earlier work OK.

- Clozure CL earlier than release 1.2 (former Openmcl) has a bug in
  Lisp printer.  This bug causes incorrect printing of FriCAS types.
  Also, Clozure CL earlier than release 1.2 has bug in complex cosine
  function.  Those bugs are fixed in release 1.2.  If you want to use
  earlier version you can work around the bugs applying the
  'contib/omcl.diff' patch and recompiling the compiler (see the patch
  or Clozure CL documentation for instructions).

- Older versions of Clisp may fail to build FriCAS complaining about
  opening already opened file -- this is error is spurious, the file
  in question in fact is closed, but for some reason Clisp got
  confused.

- On new Linux kernel build using Clisp may take very long time.  This
  is caused by frequent calls to 'fsync' performed without need by
  Clisp.
